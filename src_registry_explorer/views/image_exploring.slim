ruby:
  require_relative '../utils/Node'
  require_relative '../utils/file_utils'
  require_relative '../utils/time_measurer'
  margin_coef=1.5
  possible_statuses = ['error', 'ok', 'warning']
  TimeMeasurer.start_measurement
  splited_path = tag_image_path.split('/')
  img_pth_param = splited_path[0..-3].join('/')
  image_in_registry_path = "/" + img_pth_param
  tag_string = splited_path[-2]
  image_sha256 = tag_image_path[(tag_image_path.rindex('/') + 1)..]
  path_to_repositories = $base_path + "/repositories"
  full_path_to_image_tag = path_to_repositories + image_in_registry_path + '/_manifests/tags/' + tag_string
  index_node_link = nil
  TimeMeasurer.measure(:extract_image_by_sha256) do
    index_node_link = extract_index(image_sha256)
    index_node_link[:node].set_created_at(extract_index_created_at(image_sha256))
  end
  TimeMeasurer.log_measurers
javascript:
    let attestationExploring = false
    function updateRowStripes() {
        const visibleRows = [...document.querySelectorAll('tbody tr.tree-node:not(.hidden)')];

        visibleRows.forEach((row, index) => {
            if (index % 2 === 0) {
                row.classList.add('striped-even');
                row.classList.remove('striped-odd');
            } else {
                row.classList.add('striped-odd');
                row.classList.remove('striped-even');
            }
        });
    }

    function showAllChildrenLevelOne(currentNode) {
        let childElem = currentNode.nextElementSibling;
        let closestArrow = currentNode?.querySelector(".hide-show-arrow");
        closestArrow?.classList.add("rotate-arrow");
        closestArrow = childElem?.querySelector(".hide-show-arrow");
        let levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        while (childElem && levelDifference > 0) {
            if (levelDifference === 1) {
                closestArrow?.classList.remove("rotate-arrow");
                childElem.classList.remove('hidden');
            }
            childElem = childElem.nextElementSibling;
            closestArrow = childElem?.querySelector(".hide-show-arrow");
            levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        }
        updateRowStripes();
    }

    function showAllChildren(currentNode) {
        let childElem = currentNode.nextElementSibling;
        let closestArrow = currentNode?.querySelector(".hide-show-arrow");
        closestArrow?.classList.add("rotate-arrow");
        closestArrow = childElem?.querySelector(".hide-show-arrow");
        let levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        while (childElem && levelDifference > 0) {
            closestArrow?.classList.add("rotate-arrow");
            childElem.classList.remove('hidden');
            childElem = childElem.nextElementSibling;
            closestArrow = childElem?.querySelector(".hide-show-arrow");
            levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        }
        updateRowStripes();
    }

    function hideAllChildren(currentNode) {
        let childElem = currentNode.nextElementSibling;
        let closestArrow = currentNode?.querySelector(".hide-show-arrow");
        while (childElem && parseInt(childElem.dataset.level) > parseInt(currentNode.dataset.level)) {
            closestArrow?.classList.remove("rotate-arrow");
            chiladElem.classList.add('hidden');
            childElem = childElem.nextElementSibling;
            closestArrow = childElem?.querySelector(".hide-show-arrow");
        }
        updateRowStripes();
    }

    function setAttestationsExploring(boolean) {
        const uri = "/set-in-session-attestations-exploring?new_value=" + boolean;
        const response = fetch(uri, {method: 'PUT'});
        try {
            response.then(response => {
                if (response.status === 200) {
                    window.location.reload();
                }
            });
        } catch (error) {
            UIkit.notification({message: 'Error setting session value', status: 'danger', pos: 'top-right'});
        }
        attestationExploring = boolean;
    }

    function refreshAttestationsExploring() {
        fetch('/get-in-session-attestations-exploring', {method: 'GET'})
            .then(response => response.text())
            .then(text => {
                attestationExploring = text === "true";
                document.querySelectorAll('.switch-btn').forEach(btn => {
                    const btnText = btn.textContent;
                    if (btnText === "Explore attestations") {
                        if (attestationExploring) btn.classList.add('uk-button-primary');
                        else btn.classList.remove('uk-button-primary');
                    } else if (btnText === "Disable attestations") {
                        if (attestationExploring) btn.classList.remove('uk-button-primary');
                        else btn.classList.add('uk-button-primary');
                    }
                });
            });
    }

    document.addEventListener("DOMContentLoaded", function() {
        refreshAttestationsExploring();
        document.querySelectorAll(".tree-node").forEach(function(treeNode) {
            treeNode.classList.remove("hidden");
            treeNode.querySelector(".hide-show-arrow")?.classList.add("rotate-arrow");
        });

        document.querySelectorAll('.copy-btn').forEach(function(copyBtn) {
            copyBtn.addEventListener('click', function(event) {
                event.stopPropagation();
                const textToCopy = copyBtn.dataset.buffervalue;
                navigator.clipboard.writeText(textToCopy).then(function() {
                    UIkit.notification({message: 'sha256 copied to clipboard', status: 'success', pos: 'top-right'});
                });
            });
        });
        document.querySelector('body').addEventListener('click', function (event) {
            const row = event.target.closest('tr[data-href]');
            if (row) window.location.href = row.dataset.href;
            const currentNode = event.target.closest('.tree-node');
            let closestArrow = currentNode?.querySelector(".hide-show-arrow");
            if (currentNode) {
                if (!closestArrow) return;
                const branchExpanded = closestArrow.classList.contains("rotate-arrow");
                if (branchExpanded) {
                    if (event.ctrlKey) {
                        showAllChildren(currentNode);
                    } else {
                        hideAllChildren(currentNode);
                    }
                } else {
                    if (event.ctrlKey) {
                        showAllChildren(currentNode);
                    } else {
                        showAllChildrenLevelOne(currentNode);
                    }
                }
            }
        });
        UIkit.util.on(document, 'beforeshow', '.uk-tooltip.uk-active', function () {
            this.classList.add('uk-width-auto');
        });

        document.querySelectorAll('.switch-btn').forEach(btn => {
            btn.addEventListener('click', function () {
                const isActive = btn.classList.contains('uk-button-primary');
                if (!isActive) {
                    const btnText = btn.textContent;
                    if (btnText === "Explore attestations") {
                        setAttestationsExploring(true);
                    } else if (btnText === "Disable attestations"){
                        setAttestationsExploring(false);
                    }
                    // btn.classList.add('uk-button-primary');
                    if (btn.nextElementSibling) btn.nextElementSibling.classList.remove('uk-button-primary');
                    else btn.previousElementSibling.classList.remove('uk-button-primary');
                    window.location.reload();
                }
            });
        });
        updateRowStripes();
    });

sass:
  .copy-btn
    margin-left: 0.5rem
  .sha256-container
    display: inline-block
    width: 3.5rem
.uk-border-bottom.uk-padding-small.uk-padding-remove-left.uk-width-fit-content
  a.uk-link-text href="/tag-exploring/#{img_pth_param}/#{tag_string}"
    span.icon-padding-right.icon-padding-left.uk-text-primary uk-icon="icon: triangle-left"
    span Back to tag
    / "/tag-exploring#{entry[:image_name]}/#{entry[:tag_name]}" #{entry[:image_name] + ':' + entry[:tag_name] + '@sha256:' + entry[:index_node_link].sha256}

h1.uk-h1 uk-tooltip="title: #{index_node_link[:node].sha256}; delay: 500;" = "#{image_in_registry_path[1..] + ':' + tag_string + '@sha256:' + index_node_link[:node].sha256[0..5] + '...' }"
.uk-button-group.uk-float-right
  button.switch-btn.uk-button.uk-button-default style=""= "Explore attestations"
  button.switch-btn.uk-button.uk-button-default style=""= "Disable attestations"
table.uk-table.uk-table-hover.uk-table-divider.uk-table-striped
  thead
    tr
      th style="min-width: 15%; width: 15%; max-width: 15%; padding-left: 0" Node path
      th style="min-width: 5%; width: 5%; max-width: 5%" Node sha256
      th style="min-width: 10%; width: 10%; max-width: 10%" Node type
      th style="min-width: 10%; width: 10%; max-width: 10%; text-align: right" Node size
      th style="min-width: 10%; width: 10%; max-width: 10%; text-align: right" Actucal blob / image size
      th style="min-width: 10%; width: 10%; max-width: 10%" Node created at
      th style="min-width: 40%; width: 40%; max-width: 40%" Created by
  tbody
    - render_node_links = ->(node_links, depth=0) do
      - node_links.each do |node_link|
        - class_string_cursor = (!(node_link[:node].node_type.to_s =~ /zip/) && node_link[:node].links.any?) ? '' : 'default-cursor'
        - class_string_warning = node_link[:node].get_problem_blobs.size > 0 || node_link[:node].get_problem_blobs.nil? ? 'warning-background' : ''
        tr.tree-node.hidden id="#{img_pth_param}/#{tag_string}/#{node_link[:node].sha256}" data-level="#{depth}" class="#{class_string_cursor + ' ' + class_string_warning}"
          td style="padding-left: #{depth * margin_coef}rem "
            - if !(node_link[:node].node_type.to_s =~ /zip/) && node_link[:node].links.any?
              span.hide-show-arrow uk-icon="icon: chevron-right"
            span=" #{node_link[:path].join('/')}"
          td
            .sha256-container
              - if !(node_link[:node].node_type.to_s =~ /zip/)
                a uk-tooltip="title: #{node_link[:node].sha256}; cls: uk-active; delay: 500;" href="/json/#{node_link[:node].sha256}?tag_id=#{(img_pth_param + '/' + tag_string).gsub('/', ' ')}"= node_link[:node].sha256[0..4] + "..."
              - elsif node_link[:node].node_type.to_s =~ /zip/
                a uk-tooltip="title: #{node_link[:node].sha256}; delay: 500;" href="/tar-gz/#{node_link[:node].sha256}?tag_id=#{(img_pth_param + '/' + tag_string).gsub('/', ' ')}"= node_link[:node].sha256[0..4] + "..."
              - else
                span uk-tooltip="title: #{node_link[:node].sha256}; delay: 500;" = node_link[:node].sha256[0..4] + "..."
            span.copy-btn.cursor-pointer data-buffervalue="#{node_link[:node].sha256}" uk-icon="icon: copy"
          - current_node_size = node_link[:node].actual_blob_size.nil? ? "-" : represent_size(node_link[:node].actual_blob_size)
          - current_image_node_size = represent_size(node_link[:node].get_size_deep)
          - is_image_node = depth == 0
          td uk-tooltip="title: #{node_link[:node].node_type}; delay: 500;"= node_link[:node].node_type.nil? ? "-" : node_link[:node].node_type.split('.')[-2..-1].join('.')
          td.align-text-right= node_link[:node].node_size.nil? ? "-" : represent_size(node_link[:node].node_size)
          td.align-text-right= is_image_node ? current_image_node_size : current_node_size
          td= node_link[:node].created_at.nil? ? "-" : represent_datetime(node_link[:node].created_at)
          td.limit-max-width= node_link[:node].created_by.nil? ? "" : node_link[:node].created_by
        - if node_link[:node].links.any?
          - render_node_links.call(node_link[:node].links, depth + 1)
    - TimeMeasurer.start_measurement
    - TimeMeasurer.measure(:rendering_tag_page) do
      - render_node_links.call([index_node_link], 0)
    - TimeMeasurer.log_measurers
