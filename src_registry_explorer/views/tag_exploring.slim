ruby:
  require_relative '../utils/Node'
  require_relative '../utils/file_utils'
  margin_coef=1.5
  possible_statuses = ['error', 'ok', 'warning']

  base_path = (ENV['DBG'].nil? ? "/var/lib/registry" : Dir.pwd + '/../temp') + "/docker/registry/v2"

  unique_blobs_sizes = {}
  img_pth_param = full_tag_path[0..(full_tag_path.rindex('/') - 1)]
  image_in_registry_path = "/" + img_pth_param
  tag_string = full_tag_path[(full_tag_path.rindex('/') + 1)..]
  path_to_repositories = base_path + "/repositories"
  full_path_to_image_tag = path_to_repositories + image_in_registry_path + '/_manifests/tags/' + tag_string
  tag= extract_tag_without_image(full_path_to_image_tag, base_path, unique_blobs_sizes)
javascript:
    function updateRowStripes() {
        const visibleRows = [...document.querySelectorAll('tbody tr.tree-node:not(.hidden)')];

        visibleRows.forEach((row, index) => {
            if (index % 2 === 0) {
                row.classList.add('striped-even');
                row.classList.remove('striped-odd');
            } else {
                row.classList.add('striped-odd');
                row.classList.remove('striped-even');
            }
        });
        updateRowStripes();
    }

    function showAllChildrenLevelOne(currentNode) {
        let childElem = currentNode.nextElementSibling;
        let closestArrow = currentNode?.querySelector(".hide-show-arrow");
        closestArrow?.classList.add("rotate-arrow");
        closestArrow = childElem?.querySelector(".hide-show-arrow");
        let levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        while (childElem && levelDifference > 0) {
            if (levelDifference === 1) {
                closestArrow?.classList.remove("rotate-arrow");
                childElem.classList.remove('hidden');
            }
            childElem = childElem.nextElementSibling;
            closestArrow = childElem?.querySelector(".hide-show-arrow");
            levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        }
        updateRowStripes();
    }

    function showAllChildren(currentNode) {
        let childElem = currentNode.nextElementSibling;
        let closestArrow = currentNode?.querySelector(".hide-show-arrow");
        closestArrow?.classList.add("rotate-arrow");
        closestArrow = childElem?.querySelector(".hide-show-arrow");
        let levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        while (childElem && levelDifference > 0) {
            closestArrow?.classList.add("rotate-arrow");
            childElem.classList.remove('hidden');
            childElem = childElem.nextElementSibling;
            closestArrow = childElem?.querySelector(".hide-show-arrow");
            levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        }
        updateRowStripes();
    }

    function hideAllChildren(currentNode) {
        let childElem = currentNode.nextElementSibling;
        let closestArrow = currentNode?.querySelector(".hide-show-arrow");
        while (childElem && parseInt(childElem.dataset.level) > parseInt(currentNode.dataset.level)) {
            closestArrow?.classList.remove("rotate-arrow");
            childElem.classList.add('hidden');
            childElem = childElem.nextElementSibling;
            closestArrow = childElem?.querySelector(".hide-show-arrow");
        }
        updateRowStripes();
    }
    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll(".tree-node").forEach(function(treeNode) {
            if (treeNode.dataset.level <= 0) {
                treeNode.classList.remove("hidden");
                treeNode.querySelector(".hide-show-arrow")?.classList.remove("rotate-arrow");
            }
        });

        document.querySelectorAll('.copy-btn').forEach(function(copyBtn) {
            copyBtn.addEventListener('click', function(event) {
                event.stopPropagation();
                const textToCopy = copyBtn.dataset.buffervalue;
                navigator.clipboard.writeText(textToCopy).then(function() {
                    UIkit.notification({message: 'sha256 copied to clipboard', status: 'primary'});
                });
            });
        });
        document.querySelector('body').addEventListener('click', function (event) {
            const row = event.target.closest('tr[data-href]');
            if (row) window.location.href = row.dataset.href;
            const currentNode = event.target.closest('.tree-node');
            let closestArrow = currentNode?.querySelector(".hide-show-arrow");
            if (currentNode) {
                if (!closestArrow) return;
                const branchExpanded = closestArrow.classList.contains("rotate-arrow");
                if (branchExpanded) {
                    if (event.ctrlKey) {
                        showAllChildren(currentNode);
                    } else {
                        hideAllChildren(currentNode);
                    }
                } else {
                    if (event.ctrlKey) {
                        showAllChildren(currentNode);
                    } else {
                        showAllChildrenLevelOne(currentNode);
                    }
                }
            }
        });
        updateRowStripes();
    });

sass:
  .copy-btn
    margin-left: 0.5rem

h1.uk-h1 Exploring #{image_in_registry_path + '/' + tag_string}
table.uk-table.uk-table-hover.uk-table-divider.uk-table-striped
  thead
    tr
      th Main
      th style="padding-left: 0" Node path
      th Node sha256
      th Node type
      th style="text-align: right" Node size
      th style="text-align: right" Actucal blob / image size
      th Node created at
      th Created by
  tbody
    - render_node_links = ->(node_links, depth=0) do
      - node_links.each do |node_link|
        - node_is_current = node_link[:node].sha256 == tag[:current_index_sha256]
        - class_string_cursor = (!(node_link[:node].node_type.to_s =~ /zip/) && node_link[:node].links.any?) ? '' : 'default-cursor'
        - class_string_warning = node_link[:node].get_problem_blobs.size > 0 || node_link[:node].get_problem_blobs.nil? ? 'warning-background' : ''
        tr.tree-node.hidden id="#{img_pth_param}/#{tag_string}/#{node_link[:node].sha256}" data-level="#{depth}" class="#{class_string_cursor + ' ' + class_string_warning}"
          td
            - if node_is_current
              span uk-icon="icon: check" style="color: green; min-width: max-content"
          td style="padding-left: #{depth * margin_coef}rem "
            - if !(node_link[:node].node_type.to_s =~ /zip/) && node_link[:node].links.any?
              span.hide-show-arrow uk-icon="icon: chevron-right"
            span=" #{node_link[:path].join('/')}"
          td
            - if !(node_link[:node].node_type.to_s =~ /zip/)
              a uk-tooltip="title: #{node_link[:node].sha256}; delay: 500;" href="/json/#{node_link[:node].sha256}"= node_link[:node].sha256[0..4] + "..."
            - elsif node_link[:node].node_type.to_s =~ /zip/
              a uk-tooltip="title: #{node_link[:node].sha256}; delay: 500;" href="/tar-gz/#{node_link[:node].sha256}"= node_link[:node].sha256[0..4] + "..."
            - else
              span uk-tooltip="title: #{node_link[:node].sha256}; delay: 500;" = node_link[:node].sha256[0..4] + "..."
            span.uk-icon-button.copy-btn.cursor-pointer data-buffervalue="#{node_link[:node].sha256}" uk-icon="icon: copy"
          - current_node_size = node_link[:node].actual_blob_size.nil? ? "-" : represent_size(node_link[:node].actual_blob_size)
          - current_image_node_size = represent_size(node_link[:node].get_size_deep(unique_blobs_sizes))
          - is_image_node = depth == 0
          td uk-tooltip="title: #{node_link[:node].node_type}; delay: 500;"= node_link[:node].node_type.nil? ? "-" : node_link[:node].node_type.split('.')[-2..-1].join('.')
          td.align-text-right= node_link[:node].node_size.nil? ? "-" : represent_size(node_link[:node].node_size)
          td.align-text-right= is_image_node ? current_image_node_size : current_node_size
          td= node_link[:node].created_at.nil? ? "-" : transform_datetime(node_link[:node].created_at)
          td.limit-max-width= node_link[:node].created_by.nil? ? "" : node_link[:node].created_by
        - if node_link[:node].links.any?
          - render_node_links.call(node_link[:node].links, depth + 1)
    - render_node_links.call(tag[:index_Nodes], 0)
