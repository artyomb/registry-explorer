ruby:
  require_relative '../utils/Node'
  margin_coef=1.5
  possible_statuses = ['error', 'ok', 'warning']

  base_path = (ENV['DBG'].nil? ? "/var/lib/registry" : Dir.pwd + '/../temp') + "/docker/registry/v2"

  img_pth_param = full_tag_path[0..(full_tag_path.rindex('/') - 1)]
  image_in_registry_path = "/" + img_pth_param
  tag_string = full_tag_path[(full_tag_path.rindex('/') + 1)..]
  path_to_repositories = base_path + "/repositories"
  full_path_to_image_tag = path_to_repositories + image_in_registry_path + '/_manifests/tags/' + tag_string
  tag= extract_tag_without_image(full_path_to_image_tag, base_path)
javascript:
    document.addEventListener("DOMContentLoaded", function() {
        function showAllChildrenLevelOne(currentNode) {
            let childElem = currentNode.nextElementSibling;
            let closestArrow = currentNode?.querySelector(".hide-show-arrow");
            closestArrow?.classList.add("rotate-arrow");
            closestArrow = childElem?.querySelector(".hide-show-arrow");
            let levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
            while (childElem && levelDifference > 0) {
                if (levelDifference === 1) {
                    closestArrow?.classList.remove("rotate-arrow");
                    childElem.classList.remove('hidden');
                }
                childElem = childElem.nextElementSibling;
                closestArrow = childElem?.querySelector(".hide-show-arrow");
                levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
            }
        }

        function showAllChildren(currentNode) {
            let childElem = currentNode.nextElementSibling;
            let closestArrow = currentNode?.querySelector(".hide-show-arrow");
            closestArrow?.classList.add("rotate-arrow");
            closestArrow = childElem?.querySelector(".hide-show-arrow");
            let levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
            while (childElem && levelDifference > 0) {
                closestArrow?.classList.add("rotate-arrow");
                childElem.classList.remove('hidden');
                childElem = childElem.nextElementSibling;
                closestArrow = childElem?.querySelector(".hide-show-arrow");
                levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
            }
        }

        function hideAllChildren(currentNode) {
            let childElem = currentNode.nextElementSibling;
            let closestArrow = currentNode?.querySelector(".hide-show-arrow");
            while (childElem && parseInt(childElem.dataset.level) > parseInt(currentNode.dataset.level)) {
                closestArrow?.classList.remove("rotate-arrow");
                childElem.classList.add('hidden');
                childElem = childElem.nextElementSibling;
                closestArrow = childElem?.querySelector(".hide-show-arrow");
            }
        }

        document.querySelectorAll(".tree-node").forEach(function(treeNode) {
            if (treeNode.dataset.level <= 0) {
                treeNode.classList.remove("hidden");
                treeNode.querySelector(".hide-show-arrow")?.classList.remove("rotate-arrow");
            }
        });

        document.querySelector('body').addEventListener('click', function (event) {
            const row = event.target.closest('tr[data-href]');
            if (row) window.location.href = row.dataset.href;
            const currentNode = event.target.closest('.tree-node');
            let closestArrow = currentNode?.querySelector(".hide-show-arrow");
            if (currentNode) {
                if (!closestArrow) return;
                const branchExpanded = closestArrow.classList.contains("rotate-arrow");
                if (branchExpanded) {
                    if (event.ctrlKey) {
                        showAllChildren(currentNode);
                    } else {
                        hideAllChildren(currentNode);
                    }
                } else {
                    if (event.ctrlKey) {
                        showAllChildren(currentNode);
                    } else {
                        showAllChildrenLevelOne(currentNode);
                    }
                }
            }
        });
    });

h1.uk-h1 Exploring #{image_in_registry_path + '/' + tag_string}
table.uk-table.uk-table-hover
  thead
    tr
      th
      th
      th style="padding-left: 0" Node path
      th Node sha256
      th Node type
      th Node size
      th Actucal blob size
      th Node created at
      th Created by
  tbody
    - render_node_links = ->(node_links, depth=0) do
      - node_links.each do |node_link|
        - node_is_current = node_link[:node].sha256 == tag[:current_index_sha256]
        tr.tree-node.hidden id="#{img_pth_param}/#{tag_string}/#{node_link[:node].sha256}" data-level="#{depth}"
          - if node_link[:node].node_type.to_s =~ /json/ && node_link[:node].links.any?
            td
              span.hide-show-arrow uk-icon="icon: chevron-right"
          - else
            td
          - if node_is_current
            td
              span uk-icon="icon: check" style="color: green"
          - else
            td
          td style="padding-left: #{depth * margin_coef}rem "
            span= node_link[:path].join('/')
          - if node_link[:node].node_type.to_s =~ /json/
            td
              a href="/json/#{node_link[:node].sha256}"= node_link[:node].sha256
          - elsif node_link[:node].node_type.to_s =~ /gzip/
            td
              a href="/tar-gz/#{node_link[:node].sha256}"= node_link[:node].sha256
          - else
            td= node_link[:node].sha256
          td= node_link[:node].node_type
          td= node_link[:node].node_size.nil? ? "Size unknown" : node_link[:node].node_size
          td= node_link[:node].actual_blob_size.nil? ? "Size unknown" : node_link[:node].actual_blob_size
          td= node_link[:node].created_at.nil? ? "Date unknown" : node_link[:node].created_at
          td= node_link[:node].created_by.nil? ? "Unknown" : node_link[:node].created_by
        - if node_link[:node].links.any?
          - render_node_links.call(node_link[:node].links, depth + 1)
    - render_node_links.call(tag[:index_Nodes], 0)
