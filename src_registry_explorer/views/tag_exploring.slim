/ TODO add columns: size of current and total size
/ script
/   | var imagesRegistryHost = "#{ENV['IMAGES_REGISTRY_HOST'].nil? ? '' : ENV['IMAGES_REGISTRY_HOST']}";
/   | var pathToImage = "#{image_in_registry_path}";
/   | var currentIndexSha256 = "#{tag[:current_index_sha256]}";
/   | var tagString = "#{tag_string}";
ruby:
  require_relative '../utils/Node'
  require_relative '../utils/file_utils'
  require_relative '../utils/time_measurer'
  margin_coef=1.5
  reg_host = ENV['IMAGES_REGISTRY_HOST'].nil? ? '' : ENV['IMAGES_REGISTRY_HOST']
  puts("Reg host: #{reg_host}")
  TimeMeasurer.start_measurement
  img_pth_param = full_tag_path[0..(full_tag_path.rindex('/') - 1)]
  image_in_registry_path = "/" + img_pth_param
  tag_string = full_tag_path[(full_tag_path.rindex('/') + 1)..]
  path_to_repositories = $base_path + "/repositories"
  full_path_to_image_tag = path_to_repositories + image_in_registry_path + '/_manifests/tags/' + tag_string
  tag = nil
  total_nodes = 0
  tag= extract_tag(full_path_to_image_tag)
  TimeMeasurer.log_measurers
  environ ||= tag[:index_Nodes].first.nil? || tag[:index_Nodes].first[:build_info].nil? ? nil : (tag[:index_Nodes].first[:build_info][:environment])
  image_title = begin
                  environ.nil? ? nil : environ.select { |env_string| env_string.include?('ORG_OPENCONTAINERS_IMAGE_TITLE') }.first.split('=')[1]
                rescue Exception => e
                  puts "Error when parsing image title: #{e}"
                  nil
                end
  image_tag_size = begin
                     represent_size(tag[:size]).to_s
                   rescue Exception => e
                     puts "Error when parsing image size: #{e}"
                     nil
                   end
  image_source = begin
                   environ.nil? ? nil : environ.select { |env_string| env_string.include?('ORG_OPENCONTAINERS_IMAGE_SOURCE') }.first.split('=')[1]
                 rescue Exception => e
                   puts "Error when parsing image source: #{e}"
                   nil
                 end
  image_documentation = begin
                          environ.nil? ? nil : environ.select { |env_string| env_string.include?('ORG_OPENCONTAINERS_IMAGE_DOCUMENTATION') }.first.split('=')[1]
                        rescue Exception => e
                          puts "Error when parsing image documentation: #{e}"
                          nil
                        end
  image_licenses = begin
                     environ.nil? ? nil : environ.select { |env_string| env_string.include?('ORG_OPENCONTAINERS_IMAGE_LICENSES') }.first.split('=')[1]
                   rescue Exception => e
                     puts "Error when parsing image licenses: #{e}"
                     nil
                   end

javascript:
    let imagesRegistryHost = #{{$reg_host.to_json}};
    let pathToImage = #{{image_in_registry_path.to_json}};
    let currentIndexSha256 = #{{tag[:current_index_sha256].to_json}};
    let tagString = #{{tag_string.to_json}};
    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll('.copy-btn').forEach(function(copyBtn) {
            copyBtn.addEventListener('click', function(event) {
                event.stopPropagation();
                const textToCopy = copyBtn.dataset.buffervalue;
                navigator.clipboard.writeText(textToCopy).then(function() {
                    UIkit.notification({message: 'sha256 copied to clipboard', status: 'success', pos: 'top-right'});
                });
            });
        });
        UIkit.util.on(document, 'beforeshow', '.uk-tooltip.uk-active', function () {
            this.classList.add('uk-width-auto');
        });
    });

    async function delete_by_sha256(sha256, entityString, confirmationMessage, deleteRow, soft = false) {
        // handle confirmation
        const tableElement = document.getElementById(`${pathToImage.substring(1)}/${tagString}/${sha256}`);
        UIkit.modal.confirm(confirmationMessage).then(async function () {
            try {
                const url = `/delete-${entityString}?soft=${soft}`;
                let body;
                if (entityString === 'tag') {
                    body = { images_with_tags: [`${pathToImage}:${tagString}`] };
                } else {
                    body = { path_tags_sha256: [`${pathToImage}:${tagString}@sha256:${sha256}`] };
                }
                const requestBody = JSON.stringify(body);
                const response = await fetch(url, {
                    method: 'DELETE',
                    body: requestBody
                });

                const responseText = await response.text(); // Wait for the response text

                if (response.ok) {
                    if (deleteRow) {
                        tableElement.remove();
                        tryToUseURL = true;
                    }
                    if (entityString === 'tag') {
                        window.location.href = '/index';
                        return;
                    }
                    UIkit.notification({message: responseText, status: 'success', pos: 'top-right'});
                } else {
                    UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
                }
            } catch (error) {
                UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
            }
        }, function () {
            return false;
        });
    }

    async function delete_image(sha256, deleteRow, soft) {
        delete_by_sha256(sha256, 'image', 'Are you sure you want to delete this image?', deleteRow, soft);
    }
    async function delete_tag(tagString) {
        delete_by_sha256(currentIndexSha256, 'tag', 'Are you sure you want to delete this tag? After confirmation you will be returned to the main page.', false, true);
    }

    async function delete_non_current_images() {
        // const tableElement = document.getElementById(`${pathToImage.substring(1)}/${tagString}/${sha256}`);
        tryToUseURL = true;
        UIkit.modal.confirm("Are you sure to delete all non-current images?").then(async function () {
            try {
                let items = [];
                document.querySelectorAll('.index-row').forEach(function (row) {
                    if (row.dataset.sha256 !== currentIndexSha256) {
                        items.push(`${pathToImage}:${tagString}@sha256:${row.dataset.sha256}`);
                    }
                });
                const url = `/delete-image?soft=true`;
                const response = await fetch(url, {
                    method: 'DELETE',
                    body: JSON.stringify( { path_tags_sha256: items } )
                })
                const responseText = await response.text(); // Wait for the response text

                if (response.ok) {
                    UIkit.notification({message: responseText, status: 'success', pos: 'top-right'});
                    window.location.reload();
                } else {
                    UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
                }
            } catch (error) {
                UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
            }
        }, function () {
            return false;
        });
    }

    async function copy_pull_command(sha256) {
        const pullUrl = imagesRegistryHost == null || imagesRegistryHost === '' ? window.location.host : imagesRegistryHost;
        try {
            const command_text = `docker pull ${pullUrl}${pathToImage}@sha256:${sha256}`;
            navigator.clipboard.writeText(command_text).then(function() {
                UIkit.notification({message: `Command '${command_text}' copied to clipboard`, status: 'success', pos: 'top-right'});
            });
        } catch (error) {
            UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
        }
    }

    function validateDockerTag(tag) {
        const errors = [];

        if (typeof tag !== 'string') {
            errors.push("Tag must be a string.");
            return errors.join('\n'); // early return since nothing else makes sense
        }

        if (tag.length === 0) {
            errors.push("Tag must not be empty.");
        }

        if (tag.length > 128) {
            errors.push("Tag must not exceed 128 characters.");
        }

        if (/\s/.test(tag)) {
            errors.push("Tag must not contain whitespace.");
        }

        if (!/^[A-Za-z0-9._-]*$/.test(tag)) {
            errors.push("Tag contains invalid characters (only letters, digits, '.', '_', and '-' are allowed).");
        }

        if (/^[.-]/.test(tag)) {
            errors.push("Tag must not start with a period (.) or dash (-).");
        }

        return errors.length === 0 ? "" : errors.join('\n');
    }

    async function tag_image(sha256) {
        UIkit.modal.prompt('Enter new tag name for this image<br><br><div style="padding: 1rem; background-color: #faa05a; color: #ffffff">WARNING<br> if you will delete one of these tags, when they share the same \'current\' image, both of them will be deleted</span>', 'Tag name').then(async function (newTagName) {
            console.log('Prompted:', newTagName)
            const errorMessage = validateDockerTag(newTagName);
            // check if error message is empty
            if (errorMessage !== "") {
                UIkit.notification({message: errorMessage, status: 'danger', pos: 'top-right'});
                return;
            }

            try {
                // const url = `/tag-from-image`;
                // const hostURL = imagesRegistryHost == null || imagesRegistryHost === '' ? window.location.host : imagesRegistryHost;
                // const imageString = `${hostURL}${pathToImage}:${tagString}@sha256:${sha256}`;
                // const newTagString = `${hostURL}${pathToImage}:${newTagName}`;
                // const response = await fetch(url, {
                //     method: 'POST',
                //     body: JSON.stringify({
                //         image: imageString,
                //         new_tag: newTagString
                //     })
                // });
                ////////////////////////////////////////////////////////////////////////////

                const url = `/tag-from-image`;
                const response = await fetch(url, {
                    method: 'POST',
                    body: JSON.stringify({
                        path_to_image: pathToImage,
                        old_tag: tagString,
                        new_tag: newTagName,
                        image_sha256: sha256
                    })
                });

                const responseText = await response.text(); // Wait for the response text

                if (response.ok) {
                    tryToUseURL = true;
                    UIkit.notification({message: responseText, status: 'success', pos: 'top-right'});
                } else {
                    UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
                }
            } catch (error) {
                UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
            }
        });
    }
    async function call_clean_up_dialog(event) {
        event.stopPropagation();
        cleanUpDialog = UIkit.modal.dialog(`
              <div class="uk-modal-body" id="cleanUpDialog">
                  <h2 class="uk-modal-title">Clean Up Tag</h2>
                  <form class="uk-form-stacked">
                      <div class="uk-margin">
                          <label class="uk-form-label">Keep last N versions</label>
                          <div class="uk-form-controls">
                              <input type="number" class="uk-input" id="retainNumber" min="1" value="5">
                          </div>
                      </div>
                      <div class="uk-margin">
                          <label class="uk-form-label">Delete before date</label>
                          <div class="uk-form-controls">
                              <input type="date" class="uk-input" id="deleteBeforeDate">
                          </div>
                      </div>
                  </form>
              </div>
              <div class="uk-modal-footer uk-text-right">
                  <button class="uk-button uk-button-default uk-modal-close">Cancel</button>
                  <button class="uk-button uk-button-primary" id="confirmCleanup" onclick="clean_up_tag(event)">Confirm</button>
              </div>
          `);
    }

    async function clean_up_tag(event) {
        const dialog = document.getElementById("cleanUpDialog");
        const retainNumber = parseInt(dialog.querySelector("#retainNumber").value);
        const deleteBeforeDate = dialog.querySelector("#deleteBeforeDate").value;

        if (!retainNumber || retainNumber < 1) {
            UIkit.notification({
                message: 'Number of versions to keep must be at least 1',
                status: 'danger',
                pos: 'top-right'
            });
            return;
        }

        if (deleteBeforeDate && new Date(deleteBeforeDate) > new Date()) {
            UIkit.notification({
                message: 'Delete before date cannot be in the future',
                status: 'danger',
                pos: 'top-right'
            });
            return;
        }

        cleanUpDialog.$destroy(true);

        UIkit.notification({
            message: '<div uk-spinner></div> Cleaning up image...',
            status: 'primary',
            pos: 'top-right'
        });
        try {
            const tagsForDeletion = [];
            tagsForDeletion.push(pathToImage + ":" + tagString);
            if (tagsForDeletion.length > 0) {
                const response = await fetch('/clean-up-tag', {
                    method: 'DELETE',
                    body: JSON.stringify({
                        images_with_tags: tagsForDeletion,
                        conditions: {
                            at_least_to_retain_number: retainNumber,
                            deadline_to_retain: deleteBeforeDate,
                        }
                    })
                });
                const responseText = await response.text(); // Wait for the response text
                if (response.ok) {
                    // UIkit.notification({message: responseText, status: 'success', pos: 'top-right'});
                    UIkit.modal.confirm(`Cleaning up successful. Response text:\n${responseText}\nDo you want to reload this page to see updated structure?`).then(function (confirmed) {
                        location.reload();
                    }, {});
                } else {
                    UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
                }
            } else {
                UIkit.notification({
                    message: 'No tags to clean up',
                    status: 'warning',
                });
                return;
            }
        } catch (error) {
            UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
        }
    }

sass:
  .copy-btn
    margin-left: 3.5rem
  .inline-container-small
    display: inline-block
    width: 3rem
  .inline-container
    display: inline-block
    width: 5rem
.uk-flex.uk-flex-row.align-items-center.uk-padding.uk-padding-remove-horizontal
  a.uk-link-text.border-around.hover-darker.padding-xsmall.uk-width-fit-content.uk-margin-right.align-content-center.uk-text-center onclick="goBack('/index')"
    span.icon-padding-right.icon-padding-left.uk-text-primary uk-icon="icon: chevron-left"
  .uk-flex.uk-width-expand.uk-flex-between.align-items-center
    h1.uk-h1.uk-margin-remove-bottom= "#{image_in_registry_path[1..-1] + ':' + tag_string }"
    .uk-flex.uk-flex-middle.uk-flex-between.small-column-gap
      - if !image_title.nil?
        .uk-label.uk-label-success.label-paddings.custom-label-background.unset-text-transform.align-content-center
          span.icon-padding-right uk-icon="icon: tag"
          span.uk-text-bold Title:
          span= image_title.nil? ? "Title unknown" : image_title
      - if !image_tag_size.nil?
        .uk-label.uk-label-warning.label-paddings.custom-label-background.unset-text-transform.align-content-center
          span.icon-padding-right uk-icon="icon: database"
          span.uk-text-bold Size:
          span= image_tag_size.nil? ? "Size unknown" : image_tag_size
h1.uk-margin-remove-top
  span Image 
  a href="/image-exploring#{image_in_registry_path}"= image_in_registry_path[1..-1]
.uk-flex.uk-flex-row.uk-padding-small.uk-padding-remove-horizontal.uk-margin.uk-margin-remove-left.uk-margin-remove-right.uk-flex-between.border-top.border-bottom
  - if !image_source.nil?
    div
      span.uk-text-bold.icon-padding-right Source:
      a href="#{image_source}"= image_source
  - if !image_documentation.nil?
    div
      span.uk-text-bold.icon-padding-right Documentation:
      a href="#{image_documentation}"= image_documentation
  - if !image_licenses.nil?
    div
      span.uk-text-bold.icon-padding-right Licenses:
      a href="#{image_licenses}"= image_licenses
- if !$read_only_mode && !$registry_host.nil?
  .uk-button-group.uk-float-right.small-column-gap
    button.switch-btn.uk-button.uk-button-default.uk-flex.align-items-center uk-tooltip="title: #{'Deleting tag leads to deleting all images'}; cls: uk-active; delay: 500;" style="" onclick="delete_tag('#{tag_string}')"
      span.icon-padding-right.icon-padding-right.uk-text-primary uk-icon="icon: trash" style="color: red !important"
      span="Delete tag (all images)"
    button.switch-btn.uk-button.uk-button-default uk-tooltip="title: #{'Deleting all images, besides current'}; cls: uk-active; delay: 500;" onclick="delete_non_current_images()" style=""
      span.icon-padding-right.icon-padding-right.uk-text-primary uk-icon="icon: trash" style="color: red !important"
      span= "Delete non-current images"
    button.switch-btn.uk-button.uk-button-default  uk-tooltip="title: #{'Configure cleaning registry'}; cls: uk-active; delay: 500;" style="" onclick="call_clean_up_dialog(event)"
      span.icon-padding-right.icon-padding-right.uk-text-primary uk-icon="icon: trash" style="color: red !important"
      span= "Clean up image"
table.uk-table.uk-table-hover.uk-table-divider.uk-table-striped
  thead
    tr
      th style="min-width: 0%; width: 0%; max-width: 0%" Current
      th Image exploring
      th.uk-text-right Version
      th.uk-text-right Git pipeline
      th.uk-text-right Git commit
      th Commit message
      th.uk-float-right Image size
      th Created at
      th.uk-text-right Actions
  tbody
    - tag[:index_Nodes].each do |node_link|
      - node_is_current = node_link[:node].sha256 == tag[:current_index_sha256]
      - class_string_warning = node_link[:node].get_problem_blobs.size > 0 || node_link[:node].get_problem_blobs.nil? ? 'warning-background' : ''
      tr.index-row data-sha256="#{node_link[:node].sha256}" style="cursor: default" id="#{img_pth_param}/#{tag_string}/#{node_link[:node].sha256}" class="#{class_string_warning}" onmouseover="this.querySelector('.to-be-hidden').classList.remove('uk-hidden')" onmouseout="this.querySelector('.to-be-hidden').classList.add('uk-hidden')"
        td.align-text-center
          - if node_is_current
            span.uk-padding-remove uk-icon="icon: check" style="color: green; min-width: max-content; padding: 0.5rem"
        td
          .inline-container-small
            a href="/image-exploring/#{img_pth_param + '/' + tag_string}/sha256:#{node_link[:node].sha256}" uk-tooltip="title: #{node_link[:node].sha256}; cls: uk-active; delay: 500;"= node_link[:node].sha256[0..6] + "..."
          a.to-be-hidden.uk-hidden
            span.copy-btn.cursor-pointer data-buffervalue="#{node_link[:node].sha256}" uk-icon="icon: copy"
          - current_node_size = node_link[:node].actual_blob_size.nil? ? "-" : represent_size(node_link[:node].actual_blob_size)
          - current_image_node_size = represent_size(node_link[:node].get_effective_size)
        td.uk-text-right.cursor-pointer.uk-overflow-auto
          - latest_index_build_info = node_link[:build_info]
          - service_version ||= latest_index_build_info.dig(:labels, "org.opencontainers.image.version".to_sym) if !latest_index_build_info.nil?
          - service_version ||= latest_index_build_info.dig(:labels, "org.label-schema.version".to_sym) if !latest_index_build_info.nil?
          - if !service_version.nil?
            .inline-container
              span.uk-padding-small.uk-padding-remove-vertical.uk-padding-remove-right.uk-padding-remove-left= service_version
          - else
            .inline-container
              span.uk-text-secondary= "-"
        td.uk-text-right.uk-text-primary.cursor-pointer
          - git_pipeline_url ||= node_link.dig(:build_info, :gitlab_ci_cd_env, :COM_GITLAB_CI_PIPELINEURL) if !node_link.nil?
          - git_pipeline_url ||= node_link.dig(:build_info, :github_ci_cd_env, :COM_GITHUB_CI_ACTIONURL) if !node_link.nil?
          - git_pipeline_iid ||= node_link.dig(:build_info, :gitlab_ci_cd_env, :COM_GITLAB_CI_PIPELINE_IID) if !node_link.nil?
          - git_pipeline_iid ||= git_pipeline_url.nil? ? nil : git_pipeline_url.split('/').last
          - if !git_pipeline_url.nil?
            a href="#{git_pipeline_url}"
              .inline-container
                span.uk-padding-small.uk-padding-remove-vertical.uk-padding-remove-right.uk-padding-remove-left= git_pipeline_iid
          - else
            .inline-container
              span.uk-text-secondary= "-"
        td.uk-text-right.uk-text-primary.cursor-pointer
          - git_commit_url ||= node_link.dig(:build_info, :gitlab_ci_cd_env, :COM_GITLAB_CI_COMMITURL) if !node_link.nil?
          - git_commit_url ||= node_link.dig(:build_info, :github_ci_cd_env, :COM_GITHUB_CI_COMMITURL) if !node_link.nil?
          - git_commit_short_sha ||= node_link.dig(:build_info, :gitlab_ci_cd_env, :COM_GITLAB_CI_COMMIT_SHORT_SHA) if !node_link.nil?
          - git_commit_short_sha ||= node_link.dig(:build_info, :github_ci_cd_env, :COM_GITHUB_CI_COMMIT_SHORT_SHA) if !node_link.nil?
          - if !git_commit_url.nil?
            a href="#{git_commit_url}"
              span uk-icon="icon: git-branch"
              .inline-container.uk-text-right
                span.uk-padding-small.uk-padding-remove-vertical.uk-padding-remove-right.uk-padding-remove-left= git_commit_short_sha
          - else
            .inline-container
              span.uk-text-secondary="-"
        td.uk-overflow-auto
          - commit_message ||= node_link.dig(:build_info, :gitlab_ci_cd_env, :COM_GITLAB_CI_COMMIT_MESSAGE) if !node_link.nil?
          - commit_message ||= node_link.dig(:build_info, :github_ci_cd_env, :COM_GITHUB_CI_COMMIT_MESSAGE) if !node_link.nil?
          - if !commit_message.nil?
            .inline-container
              span.uk-padding-small.uk-padding-remove-vertical.uk-padding-remove-right.uk-padding-remove-left.white-space-pre= commit_message.gsub('\n', "\n")
        td.align-text-right= current_image_node_size
        td #{represent_datetime(node_link[:node].created_at)}
        td.align-text-right
          - if !node_link[:node].sha256.nil?
            - if !$read_only_mode
              span.uk-icon-link.cursor-pointer.icon-padding-right uk-icon="icon: close-circle" uk-tooltip="title: #{'Delete chosen tag'}; cls: uk-active; delay: 500;" onclick="delete_image(`#{node_link[:node].sha256}`, true, false)"
              span.uk-icon-link.cursor-pointer.icon-padding-right uk-icon="icon: trash" uk-tooltip="title: #{'Soft delete chosen image'}; cls: uk-active; delay: 500;" onclick="delete_image(`#{node_link[:node].sha256}`, true, true)"
            span.uk-icon-link.cursor-pointer.icon-padding-right uk-icon="icon: copy" uk-tooltip="title: #{'Copy pulling this image command'}; cls: uk-active; delay: 500;" onclick="copy_pull_command(`#{node_link[:node].sha256}`)"
            span.uk-icon-link.cursor-pointer uk-icon="icon: tag" uk-tooltip="title: #{'Create new tag with this image'}; cls: uk-active; delay: 500;" onclick="tag_image(`#{node_link[:node].sha256}`)"
