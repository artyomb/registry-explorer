javascript:
    let readyToDeleteBlobs = null;
    let unusedBlobsAmount = null;
    let unusedBlobsSize = null;

    async function loadBlobsData() {
        try {
            const fetchUrl = "/garbage-collection-data?with_history=true";
            const response = await fetch(fetchUrl, {method: 'GET'});

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const responseBody = await response.json(); // Now it's safe to parse JSON

            if (!responseBody || typeof responseBody !== "object") {
                throw new Error("Invalid JSON response");
            }
            readyToDeleteBlobs = responseBody.unused_blobs;
            const storedBlobsAmount = responseBody.stored_blobs_amount;
            const storedBlobsSize = responseBody.stored_blobs_size;
            unusedBlobsAmount = responseBody.unused_blobs_amount;
            unusedBlobsSize = responseBody.unused_blobs_size;

            let descriptionParagraphContent = `
                    <span>In registry</span>
                    <span class="uk-text-italic uk-text-bold">${storedBlobsAmount}</span>
                    <span>blobs, which use</span>
                    <span class="uk-text-italic uk-text-bold">${storedBlobsSize}</span>
                    <span>disk space</span>
                    <br>
                    <span class="uk-text-italic uk-text-bold">Unused ${unusedBlobsAmount}</span>
                    <span>blobs, which use</span>
                    <span class="uk-text-italic uk-text-bold">${unusedBlobsSize}</span>
                `;
            document.getElementById("loading-spinner-meta").style.display = "none";
            document.getElementById('description').innerHTML = descriptionParagraphContent;

            const rowsInTable = responseBody.rows_in_table;
            const rowsHtml = rowsInTable.map(row => `
                <tr>
                    <td/>
                    <td class="uk-text-italic uk-text-bold">${row.image_name}</td>
                    <td class="uk-text-italic uk-text-bold align-text-right">${row.unused_revision}</td>
                    <td class="uk-text-italic uk-text-bold align-text-right">${row.unused_layers}</td>
                </tr>
                `).join('');
            document.getElementById('affected-images-table').innerHTML = rowsHtml;
            document.getElementById('loading-spinner-table').style.display = 'none';
            document.getElementById('bottom-button').style.display = 'inline-block';
        } catch (error) {
            UIkit.notification({message: 'Error: ' + error.message, status: 'danger', pos: 'top-right'});
            console.error("Fetch Error:", error); // ðŸ”¹ Debugging output
        }
        UIkit.notification({message: "Data loading ended", status: 'primary', pos: 'top-right'});
    }

    async function performGarbageCollectionWithoutHistory() {
        performGarbageCollectionWithoutHistory(unusedBlobsAmount, unusedBlobsSize);
    }

    async function performGarbageCollectionWithoutHistory(blobs, diskUsage) {
        UIkit.modal.confirm(`Do you want start DELETING ${blobs} UNUSED BLOBS and FREE ${diskUsage} disk space? This action CANNOT BE UNDONE`).then(async function () {
            requestURL = '/perform-garbage-collection?with_history=true';
            try {
                UIkit.notification({
                    message: "Soon you will see deleting process summary",
                    status: 'primary',
                    pos: 'top-right'
                });
                const response = await fetch(requestURL, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        blobs: readyToDeleteBlobs,
                    })
                });
                const responseText = await response.text();
                if (response.ok) {
                    UIkit.notification({message: responseText, status: 'success', pos: 'top-right'});
                    UIkit.modal.confirm('Do you want return to the main page?').then(function () {
                        window.location.href = '/';
                    }, function () {window.location.reload();});
                } else {
                    UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
                }
            } catch (error){
                UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
            }
        }, function () {
            return false;
        });
    }

    document.addEventListener("DOMContentLoaded", function () {
        loadBlobsData();
    });

sass:
  .copy-btn
    margin-left: 3.5rem

  .inline-container-small
    display: inline-block
    width: 3rem

  .inline-container
    display: inline-block
    width: 5rem
.uk-flex.uk-flex-row.uk-flex-between.align-items-center
  .uk-flex.uk-flex-column
    .uk-flex.uk-flex-row.align-items-center.uk-padding.uk-padding-remove-horizontal
      a.uk-link-text.border-around.hover-darker.padding-xsmall.uk-width-fit-content.uk-margin-right.align-content-center.uk-text-center onclick="history.back()"
        span.icon-padding-right.icon-padding-left.uk-text-primary uk-icon = "icon: chevron-left"
      .uk-flex.uk-width-expand.uk-flex-between.align-items-center
        h1.uk-h1.uk-margin-remove-bottom = " #{ 'Garbage collection with history deleting preview' }"
    p id="description"
      #loading-spinner-meta.uk-padding-remove.uk-margin-remove uk-spinner="ratio: 1.5"
  .uk-flex.uk-text-bold style="height: 3rem"
    button.uk-button.uk-button-danger.uk-button-small onclick="performGarbageCollectionWithoutHistory()" Perform garbage collection

table.uk-table.uk-table-hover.uk-table-divider.uk-table-striped id="blobs-table"
  thead
    tr
      th.align-text-center style="min-width: 3%; width: 3%; max-width: 3%"
        / span Filter
        span.icon-padding-left.uk-text-primary.cursor-pointer  uk-icon="icon: menu" onclick="event.stopPropagation(); document.getElementById('include-menu').classList.toggle('uk-hidden')"
      th style="min-width: 25%; width: 25%; max-width: 25%" Image name
      th.align-text-right Unused revision
      th.uk-text-right Unused layers
  tbody id="affected-images-table"
    #loading-spinner-table.uk-flex.uk-flex-center.uk-flex-middle.uk-position-fixed.uk-position-center.uk-margin-top.uk-margin-bottom uk-spinner="ratio: 1.5"
.uk-flex.uk-margin-large.justify-self-right.uk-text-bold style="height: 3rem"
  button.uk-button.uk-button-danger.uk-button-small id="bottom-button" onclick="performGarbageCollectionWithoutHistory()" style="display: none" Perform garbage collection
