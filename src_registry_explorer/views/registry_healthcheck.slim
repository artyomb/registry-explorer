ruby:
  session = RegistryExplorerFront.get_session
  previous_session_flag = session[:attestations_exploring]
  session[:attestations_exploring] = true
  CachesManager.execute_refresh_pipeline

  images = extract_images()
  problem_indexes = Set.new
  problem_blobs = {}
  images.each do |image|
    image[:tags].each do |tag|
      tag[:index_Nodes].each do |node_link|
        if node_link[:node].get_problem_blobs.size > 0
          current_problem_index = { image: image[:name], tag: tag[:name], index_node: node_link[:node].sha256 }
          problem_indexes << current_problem_index
          current_index_problem_blobs =  node_link[:node].get_problem_blobs
          current_index_problem_blobs.each do |blob|
            problem_blobs[blob] ||= { referencing_indexes: Set.new }
            # Referencing image string writes as "image:tag@sha256:..."
            problem_blobs[blob][:referencing_indexes].add(current_problem_index)
          end
        end
      end
    end
  end
  session[:attestations_exploring] = previous_session_flag


javascript:
    let problem_indexes = #{{problem_indexes.to_a.to_json}}

    function removeProblemIndexes() {
        UIkit.modal.confirm("Are you sure to delete all images with at least one problem blob?").then(async function () {
            successful_deletions = 0;
            failed_deletions = 0;
            let items = []
            problem_indexes.forEach(function (problem_index) {
                items.push(`${problem_index.image}:${problem_index.tag}@sha256:${problem_index.index_node}`)
            });
            try {
                UIkit.notification({message: `Deleting ${items.length} indexes...`, status: 'primary', pos: 'top-right'});

                const url = `/delete-image?soft=false`;
                const response = await fetch(url, {
                    method: 'DELETE',
                    body: JSON.stringify( { path_tags_sha256: items } )
                })
                const responseText = await response.text(); // Wait for the response text
                // const response = { 'ok': true, 'responseText': 'Success' };
                // const responseText = 'Success';
                if (response.ok) {
                    UIkit.notification({message: responseText, status: 'success', pos: 'top-right'});
                } else {
                    UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
                }
            } catch (error) {
                UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
                failed_deletions++;
            }
            UIkit.notification({message: `Successfully deleted ${successful_deletions} images, failed to delete images`});
            UIkit.modal.confirm('Do you want return to the main page?').then(function () {
                window.location.href = '/';
            }, function () {
                window.location.reload();
            });
        }, function () {
            return false;
        });
    }
.uk-flex.uk-padding.uk-padding-remove-horizontal.uk-width-expand.uk-flex-between.align-items-center.uk-padding-remove-bottom

  .uk-flex.uk-flex-row.align-items-center.uk-padding.uk-padding-remove-horizontal
    a.uk-link-text.border-around.hover-darker.padding-xsmall.uk-width-fit-content.uk-margin-right.align-content-center.uk-text-center href = "/index"
      span.icon-padding-right.icon-padding-left.uk-text-primary uk-icon = "icon: chevron-left"
    .uk-flex.uk-width-expand.uk-flex-between.align-items-center
      h1.uk-h1.uk-margin-remove-bottom = "Healthcheck (#{problem_blobs.size} problem blobs in #{problem_indexes.size} unique indexes)"
  - if problem_blobs.size > 0
    .uk-flex.uk-text-bold style="height: 3rem"
      button.uk-button.uk-button-danger.uk-button-small onclick="removeProblemIndexes()" Remove problem indexes
  - else
    .uk-flex.uk-text-bold style="height: 3rem"
      button.uk-button.uk-button-danger.uk-button-small
        span uk-icon="icon: check" onclick="UIkit.notification({message: 'No problem blobs found', status: 'success', pos: 'top-right'})"

- problem_blobs.sort_by { |_, data| -data[:referencing_indexes].size }.each do |blob, data|
  .uk-margin.uk-card.uk-card-default
    .uk-card-header.uk-padding-small
      .uk-grid.uk-flex-middle uk-grid=""
        .uk-width-expand
          h3.uk-card-title.uk-margin-remove-bottom
            span.uk-margin-small-right uk-icon="icon: database"
            = "Blob: #{blob} (Referenced by #{data[:referencing_indexes].size} nodes)"
        .uk-width-auto
          button.uk-button.uk-button-default.uk-button-small uk-toggle="target: #blob-#{blob.gsub(':', '-')}"
            span uk-icon="icon: chevron-down"
    .uk-card-body.uk-flex.uk-flex-column.uk-padding-small.uk-animation-fade id="blob-#{blob.gsub(':', '-')}" hidden=""
      - data[:referencing_indexes].each do |ref_index|

        a.uk-margin-small style="width: 100%" href="/image-exploring/#{ref_index[:image]}/#{ref_index[:tag]}/#{ref_index[:index_node]}"
          span.uk-text-small
          span.uk-margin-small-right uk-icon="icon: link"= "#{ref_index[:image]}:#{ref_index[:tag]}@#{ref_index[:index_node]}"