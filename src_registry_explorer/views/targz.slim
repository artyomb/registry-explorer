sass:
  li
    list-style: none
  ul
    list-style: none

ruby:
  require_relative '../utils/Node'
  require_relative '../utils/file_utils'
  TimeMeasurer.start_measurement
  image_entries = get_referring_image_entries(params[:sha256])
  error_message = ""
  structure ||= begin
                  extract_tar_gz_structure(params[:sha256])
                rescue Exception => e
                  error_message = "Error when extracting archive structure:\n#{e}"
                  nil
                end
  previous_tag_id = params[:tag_id].nil? ? nil : params[:tag_id].gsub(" ", "/")
  previous_image_sha256 = params[:img_sha256].nil? ? nil : params[:img_sha256]
  tar_gz_node = nil
  if !image_entries.nil? && image_entries.size > 0
    current_node = image_entries.first[:index_node]
    if !current_node.nil?
      tar_gz_node = find_node_by_sha256_in_hierarchy(params[:sha256], current_node)
    end
  end
  TimeMeasurer.log_measurers

javascript:
    document.addEventListener("DOMContentLoaded", function() {
        const fileViewArea = document.getElementById("file-area");

        document.querySelectorAll(".file-element").forEach(function(fileElement) {
            fileElement.addEventListener("click", async function () {
                console.log("Clicked on file element with data-href:", fileElement.dataset.href);
                const url = eval(fileElement.dataset.href);
                try {
                    const response = await fetch(url);
                    const htmlContent = await response.text();
                    fileViewArea.style.opacity = 1;
                    fileViewArea.innerHTML = htmlContent;
                    fileViewArea.style.textAlign = "left";
                    document.querySelector(".chosen")?.classList.toggle("chosen");
                    fileElement.classList.toggle("chosen");
                    hljs.highlightElement(fileViewArea.querySelector("code"));
                } catch (error) {
                    console.error("Error loading file content:", error);
                    fileViewArea.innerHTML = "Error loading file content";
                }
            });
        });
    });
sass:
    .hdr-container
      padding-bottom: 1rem
      padding-right: 1rem
      position: sticky
      top: 0
    #directory-structure-container
      flex: 1
      flex-basis: 50%
      .file-structure
        height: 90%
        overflow-y: auto
        overflow-x: auto
        padding-right: 0.5rem
      ul
        margin: 0
        margin-left: 1rem
      .dir-element
        &:hover
          background-color: #f0f0f0
      .file-element
        &:hover
          cursor: pointer
          background-color: #f0f0f0
          color: black
    #file-area
      flex: 1
      flex-basis: 50%

      code
        background-color: #e4e4e4
        margin-bottom: 0
        height: -webkit-fill-available
        white-space: pre

    .chosen
      background-color: rgba(77, 125, 208, 0.3)
      color: black

    .content-container
      height: 80vh
      display: flex
      flex-direction: row
      column-gap: 1rem
      padding: 1rem
      border: 0.1rem solid #ccc
      border-radius: 0.5rem
/ - if (!previous_tag_id.nil?)
/   .uk-border-bottom.uk-padding-small.uk-padding-remove-left.uk-width-fit-content
/     a.uk-link-text href="/tag-exploring/#{previous_tag_id}"
/       span.icon-padding-right.icon-padding-left.uk-text-primary uk-icon="icon: triangle-left"
/       span Back to tag
- TimeMeasurer.start_measurement
- TimeMeasurer.measure(:rendering_gzip_structure_view) do
  - if(!previous_image_sha256.nil?)
    .uk-border-bottom.uk-padding-small.uk-padding-remove-left.uk-width-fit-content
      a.uk-link-text href="/image-exploring/#{previous_tag_id}/#{previous_image_sha256}"
        span.icon-padding-right.icon-padding-left.uk-text-primary uk-icon="icon: triangle-left"
        span Back to image
  h1.uk-h1
    span Archive blob exploring
    span.uk-text-primary uk-tooltip="title: #{params[:sha256]}; cls: uk-active; delay: 500;"= " #{params[:sha256]}"
  - if(error_message.empty?)
    h3.uk-h3= "Total size: #{represent_size(structure[:size])}"
    -if !tar_gz_node.nil? && !tar_gz_node.created_by.nil?
      h3.uk-h3= "Created by: #{tar_gz_node.created_by}"
    .content-container
      #directory-structure-container
        .hdr-container
          span.table-header= "Files"
          span.table-header.uk-float-right= "Size"
        .file-structure
          - render_structure = ->(structure, parent_path = '', parent_id = 'root', counter = 0) do
            - structure&.select{|n, c| c.is_a?(Hash) && c[:is_dir] }.each do |name, content|
              li
                - current_path = "#{parent_path}/#{name}"
                - current_id = "node_#{parent_id}_#{counter}"
                .dir-element
                  a.uk-toggle href="#" uk-toggle="target: ##{current_id}"
                    span uk-icon="icon: folder"
                    = " #{name}"
                  span.uk-float-right #{represent_size(content[:size])}
                ul.uk-list.uk-margin-left id=current_id hidden=true
                  - render_structure.call(content, current_path, current_id, 0)
              - counter += 1
            - structure&.select{|n, c| !(c.is_a?(Hash) && c[:is_dir]) && n != :size && c.is_a?(Hash) }.each do |name, content|
              li
                - current_path = "#{parent_path}/#{name}"
                - current_id = "node_#{parent_id}_#{counter}"
                .file-element data-href="'/file-in-archive/#{params[:sha256]}/$path#{parent_path}/#{name}'"
                  span uk-icon="icon: file-text"
                  = " #{name}"
                  span.uk-float-right #{represent_size(content[:size])}
              - counter += 1

          - render_structure.call(structure)
      #file-area.uk-padding.content-display Choose file to view content

    p= "Images, referring to this archive:"
    ul.uk-list.uk-list-large.uk-list-divider.uk-list-disc.uk-list-primary.uk-border-rounded.uk-box-shadow-small.uk-margin-remove-vertical.uk-padding
      - image_entries.each do |entry|
        li
          a href="/tag-exploring#{entry[:image_name]}/#{entry[:tag_name]}" #{entry[:image_name] + ':' + entry[:tag_name] + '@sha256:' + entry[:index_node].sha256}
  - else
    pre.uk-text-danger= error_message

  / a href="/file-in-archive/#{params[:sha256]}/$path/#{parent_path}/#{name}"
- TimeMeasurer.log_measurers