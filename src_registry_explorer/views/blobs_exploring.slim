ruby:
  require_relative '../utils/common_utils'
  require_relative '../utils/Node'
  require_relative '../utils/file_utils'
  require_relative '../utils/time_measurer'
  margin_coef=1.5
  # CALCULATION OF DISK USAGE
  stored_blobs = nil
  stored_blobs_size = nil
  required_blobs = nil
  required_blobs_size = nil
  unused_blobs = nil
  unused_blobs_size = nil
  not_existing_blobs = Set.new
  blobs_set = Set.new
  images = extract_images()
  TimeMeasurer.start_measurement
  TimeMeasurer.measure(:calculate_disk_usage) do
    blobs_path = $base_path + '/blobs/sha256'
    required_blobs = images.map { _1[:required_blobs] }.reduce(Set.new, :merge)
    stored_blobs = Set.new
    Dir.children(blobs_path).each do |intermediate_path|
      current_blobs = Dir.children(File.join(blobs_path, intermediate_path))
      stored_blobs.merge(current_blobs)
      current_blobs.each { |blob| blobs_set.add(
              {
                      "sha256" => blob, "size" => CachesManager.blob_size(blob),
                      "is_required" => required_blobs.include?(blob),
                      "created_at" => File.exist?(File.join(blobs_path, intermediate_path, blob)) ? File.mtime(File.join(blobs_path, intermediate_path, blob)) : '-',
              }) }
    end
    # TODO: implement exploring unnecessary blobs
    puts "Directory size: #{represent_size(Dir.glob(File.join(blobs_path, '**', '*')) # Get all files and subdirectories
                                              .select { |file| File.file?(file) } # Filter only files
                                              .sum { |file| File.size(file) })}"
    unused_blobs = stored_blobs - required_blobs
    not_existing_blobs = required_blobs - stored_blobs
    required_blobs_size = required_blobs.map { |b| CachesManager.blob_size(b) }.sum
    stored_blobs_size = stored_blobs.map { |b| CachesManager.blob_size(b) }.sum
    unused_blobs_size = unused_blobs.map { |b| CachesManager.blob_size(b) }.sum
    disk_size_tooltip = "title:" +
            "Disk usage is calculated as the sum of all blobs in the registry.<br><br>" +
            "Actual data:<br>" +
            "#{required_blobs.size} required blobs disk usage: #{represent_size(required_blobs_size)}<br>" +
            "#{stored_blobs.size} stored blobs disk usage: #{represent_size(stored_blobs_size)}<br>" +
            "#{unused_blobs.size} unused blobs disk usage: #{represent_size(unused_blobs_size)}<br>" +
            "#{not_existing_blobs.size} not existing blobs"
  end
  TimeMeasurer.log_measurers

javascript:
    let sourceBlobs = #{{blobs_set.to_a.to_json}};
    let readOnlyMode = #{{$read_only_mode}};
    let pageSize = 25;
    const blobsNotRequiredPredicate = blob => !blob.is_required && (document.getElementById('include-unused')?.checked ?? true);
    const blobsRequiredPredicate = blob => blob.is_required && (document.getElementById('include-required')?.checked ?? true);

    let visualizationOptions = { 'including_conditions' : [blobsNotRequiredPredicate, blobsRequiredPredicate], 'Sorting' : [] };
    let blobs = null;

    function updateBlobs() {
        blobs = sourceBlobs
            .filter(blob => visualizationOptions['including_conditions'].some(predicate => predicate(blob)))
            .sort((a, b) => b.size - a.size);
    }

    function represent_size(bytes) {
        try {
            const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
            if (bytes === 0) return '0 B';

            const exp = Math.min(Math.floor(Math.log(bytes) / Math.log(1024)), units.length - 1);
            const size = bytes / Math.pow(1024, exp);

            return size.toFixed(2) + ' ' + units[exp];
        } catch (e) {
            console.error("Error in size representing:", e);
            return '-';
        }
    }

    function updatePage(pageNumber) {
        updateBlobs();
        updatePaginationBar(pageNumber);
        updateTable(pageNumber);
    }

    function updatePaginationBar(pageNumber) {
        const totalPages = Math.ceil(blobs.length / pageSize);
        const paginationBar = document.getElementById('pagination-list');
        paginationBar.innerHTML = '';

        const ul = document.createElement('ul');
        ul.className = 'uk-pagination';
        ul.setAttribute('uk-margin', '');

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.innerHTML = `<a href="#" onclick="updatePage(${Math.max(0, pageNumber - 1)})"><span uk-pagination-previous></span></a>`;
        if (pageNumber === 0) prevLi.className = 'uk-disabled';
        ul.appendChild(prevLi);

        // First page
        if (pageNumber > 2) {
            ul.appendChild(createPageItem(0));
            if (pageNumber > 3) {
                const ellipsis = document.createElement('li');
                ellipsis.className = 'uk-disabled';
                ellipsis.innerHTML = '<span>…</span>';
                ul.appendChild(ellipsis);
            }
        }

        // Pages around current
        for (let i = Math.max(0, pageNumber - 2); i <= Math.min(totalPages - 1, pageNumber + 2); i++) {
            if (i === pageNumber) {
                const activeLi = document.createElement('li');
                activeLi.className = 'uk-active';
                activeLi.innerHTML = `<span aria-current="page">${i + 1}</span>`;
                ul.appendChild(activeLi);
            } else {
                ul.appendChild(createPageItem(i));
            }
        }

        // Last page
        if (pageNumber < totalPages - 3) {
            if (pageNumber < totalPages - 4) {
                const ellipsis = document.createElement('li');
                ellipsis.className = 'uk-disabled';
                ellipsis.innerHTML = '<span>…</span>';
                ul.appendChild(ellipsis);
            }
            ul.appendChild(createPageItem(totalPages - 1));
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.innerHTML = `<a href="#" onclick="updatePage(${Math.min(totalPages - 1, pageNumber + 1)})"><span uk-pagination-next></span></a>`;
        if (pageNumber === totalPages - 1) nextLi.className = 'uk-disabled';
        ul.appendChild(nextLi);

        paginationBar.appendChild(ul);

        function createPageItem(index) {
            const li = document.createElement('li');
            li.innerHTML = `<a href="#" onclick="updatePage(${index})">${index + 1}</a>`;
            return li;
        }
    }

    function updateTable(pageNumber) {
        const startIndex = pageNumber * pageSize;
        const endIndex = startIndex + pageSize;
        const pageBlobs = blobs.slice(startIndex, endIndex);
        const blobTableBody = document.getElementById('blobs-table').querySelector('tbody');
        blobTableBody.innerHTML = '';
        const displayDeletingButtons = !readOnlyMode;

        pageBlobs.forEach(blob => {
            const row = document.createElement('tr');
            row.className = 'tree-node';
            row.style.cursor = 'default';
            row.id = blob.sha256;
            row.setAttribute('onmouseover', "this.querySelector('.to-be-hidden').classList.remove('uk-hidden')");
            row.setAttribute('onmouseout', "this.querySelector('.to-be-hidden').classList.add('uk-hidden')");

            row.innerHTML = `
                        <td class="align-text-center">
                            <span class="uk-padding-remove" uk-icon="icon: ${blob.is_required ? 'check' : 'ban'}"
                                  style="color: ${blob.is_required ? 'green' : 'red'}; min-width: max-content; padding: 0.5rem"></span>
                        </td>
                        <td>
                            <div class="inline-container-small">
                                <a href="/blob-exploring/${blob.sha256}" uk-tooltip="title: ${blob.sha256}; cls: uk-active; delay: 500;">${blob.sha256.substring(0, 6)}...</a>
                            </div>
                            <a class="to-be-hidden uk-hidden">
                                <span class="copy-btn cursor-pointer" data-buffervalue="${blob.sha256}" uk-icon="icon: copy"></span>
                            </a>
                        </td>
                        <td class="align-text-right">${represent_size(blob.size)}</td>
                        <td>${blob.created_at}</td>
                        <td class="align-text-right">
                            ${!readOnlyMode && blob.sha256 ?
                `<span class="uk-icon-link cursor-pointer icon-padding-right" uk-icon="icon: trash"
                                       uk-tooltip="title: Delete chosen blob; cls: uk-active; delay: 500;"
                                       onclick="delete_blob('${blob.sha256}')"></span>`
                : ''}
                        </td>
                    `;
            blobTableBody.appendChild(row);
        });
        document.querySelectorAll('.copy-btn').forEach(function (copyBtn) {
            copyBtn.addEventListener('click', function (event) {
                event.stopPropagation();
                const textToCopy = copyBtn.dataset.buffervalue;
                navigator.clipboard.writeText(textToCopy).then(function () {
                    UIkit.notification({message: 'sha256 copied to clipboard', status: 'success', pos: 'top-right'});
                });
            });
        });
    }

    document.addEventListener("DOMContentLoaded", function() {
        updatePage(0);
        UIkit.util.on(document, 'beforeshow', '.uk-tooltip.uk-active', function () {
            this.classList.add('uk-width-auto');
        });

        document.addEventListener('click', function(event) {
            const menu = document.getElementById('include-menu');
            if (!menu.classList.contains('uk-hidden') && !menu.contains(event.target)) {
                menu.classList.add('uk-hidden');
            }
        });

    });

    async function delete_by_sha256(sha256, entityString, confirmationMessage, deleteRow) {
        UIkit.notification({ message: 'This operation is not supported yet', status: 'danger', pos: 'top-right' });

        // handle confirmation
        // const tableElement = document.getElementById(`${pathToImage.substring(1)}/${tagString}/${sha256}`);
        // UIkit.modal.confirm(confirmationMessage).then(async function () {
        //     try {
        //         const url = `/delete-${entityString}` + pathToImage + '/$sha256/' + sha256;
        //         const response = await fetch(url, {
        //             method: 'DELETE'
        //         })
        //         const responseText = await response.text(); // Wait for the response text
        //
        //         if (response.ok) {
        //             if (deleteRow) {
        //                 tableElement.remove();
        //             }
        //             if (entityString === 'tag') {
        //                 window.location.href = '/index';
        //                 return;
        //             }
        //             UIkit.notification({message: responseText, status: 'success', pos: 'top-right'});
        //         } else {
        //             UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
        //         }
        //     } catch (error) {
        //         UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
        //     }
        // }, function () {
        //     return false;
        // });
    }

    async function delete_blob(sha256) {
        delete_by_sha256(sha256, 'image', 'Are you sure you want to delete this image?', true);
    }
    async function delete_all_blobs(isDryRun) {
        // handle confirmation
        UIkit.modal.confirm(`Do you want to start DELETING ALL BLOBS ${isDryRun ? 'with' : 'WITH NO'} DRY-RUN option`).then(async function () {
            if (isDryRun) {
                try {
                    window.location.href = '/perform-garbage-collection?dry_run=true';
                    if (true) {
                        UIkit.notification({
                            message: "Soon you will see deleting process summary",
                            status: 'success',
                            pos: 'top-right'
                        });
                    } else {
                        UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
                    }
                } catch (error) {
                    UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
                }
            } else { UIkit.notification({ message: 'This operation is not supported yet. Try dry-run option to see garbage collection review', status: 'danger', pos: 'top-right' }); }
          }, function () {
              return false;
        });
    }

    async function copy_pull_command(sha256) {
        const pullUrl = imagesRegistryHost.isNaN || imagesRegistryHost === '' ? window.location.host : imagesRegistryHost;
        try {
            const command_text = `docker pull ${pullUrl}${pathToImage}@sha256:${sha256}`;
            navigator.clipboard.writeText(command_text).then(function() {
                UIkit.notification({message: `Command '${command_text}' copied to clipboard`, status: 'success', pos: 'top-right'});
            });
        } catch (error) {
            UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
        }
    }

sass:
  .copy-btn
    margin-left: 3.5rem
  .inline-container-small
    display: inline-block
    width: 3rem
  .inline-container
    display: inline-block
    width: 5rem
.uk-flex.uk-flex-row.align-items-center.uk-padding.uk-padding-remove-horizontal
  a.uk-link-text.border-around.hover-darker.padding-xsmall.uk-width-fit-content.uk-margin-right.align-content-center.uk-text-center href="/index"
    span.icon-padding-right.icon-padding-left.uk-text-primary uk-icon="icon: chevron-left"
  .uk-flex.uk-width-expand.uk-flex-between.align-items-center
    h1.uk-h1.uk-margin-remove-bottom= "#{'Disk space usage'}"
    .uk-flex.uk-flex-middle.uk-flex-between.small-column-gap
      .uk-label.uk-label-success.label-paddings.custom-label-background.unset-text-transform.align-content-center.border-around
        ul.uk-list.uk-list-divider.uk-list-collapse.uk-list-large.uk-margin-remove-bottom
          li
            span.icon-padding-right uk-icon="icon: database"
            span.uk-text-bold= "#{stored_blobs.size} stored blobs: #{represent_size(stored_blobs_size)}"
            ul
              li
                span.icon-padding-right uk-icon="icon: database"
                span.uk-text-bold= "#{required_blobs.size} required blobs: #{represent_size(required_blobs_size)}"
              li
                span.icon-padding-right uk-icon="icon: trash"
                span.uk-text-bold= "#{unused_blobs.size} unused blobs: #{represent_size(unused_blobs_size)}"
- if !$read_only_mode
  .uk-button-group.uk-float-right.small-column-gap
    button.switch-btn.uk-button.uk-button-default.uk-flex.align-items-center uk-tooltip="title: #{'Delete all blobs, which were not used by any revision in your registry'}; cls: uk-active; delay: 500;" style="" onclick="delete_all_blobs(false)"
      span.icon-padding-right.icon-padding-right.uk-text-primary uk-icon="icon: trash" style="color: red !important"
      span="Delete unused blobs (no rollback)"
  .uk-button-group.uk-float-right.small-column-gap
    button.switch-btn.uk-button.uk-button-default.uk-flex.align-items-center uk-tooltip="title: #{'Delete all blobs, which were not used by any revision in your registry'}; cls: uk-active; delay: 500;" style="" onclick="delete_all_blobs(true)"
      span.icon-padding-right.icon-padding-right.uk-text-primary uk-icon="icon: trash" style="color: red !important"
      span="Delete unused blobs (dry-run)"
table.uk-table.uk-table-hover.uk-table-divider.uk-table-striped id="blobs-table"
  thead
    tr
      th.align-text-center style="min-width: 3%; width: 3%; max-width: 3%"
        / span Filter
        span.icon-padding-left.uk-text-primary.cursor-pointer uk-tooltip="title: #{'Choose including options'}; cls: uk-active; delay: 500;" uk-icon="icon: menu" onclick="event.stopPropagation(); document.getElementById('include-menu').classList.toggle('uk-hidden')"
        #include-menu.align-text-left.uk-hidden.uk-card.uk-card-default.uk-position-absolute.uk-padding-small style="z-index: 1000"
          .uk-margin-small
            label.uk-form-label Include in exploring:
            .uk-margin-small
              label
                input.uk-checkbox type="checkbox" name="include-required" checked="checked" id="include-required" onchange="updatePage(0)"
                span.uk-margin-small-left Required blobs
            .uk-margin-small
              label
                input.uk-checkbox type="checkbox" name="include-unused" checked="checked" id="include-unused" onchange="updatePage(0)"
                span.uk-margin-small-left Unused blobs
          / .uk-margin-small
          /   label.uk-form-label Search by SHA256:
          /   .uk-inline.uk-width-1-1
          /     span.uk-form-icon uk-icon="icon: search"
          /     input.uk-input type="text" placeholder="Enter SHA256..." id="sha-include"
      th style="min-width: 25%; width: 25%; max-width: 25%" Blob exploring
      th.uk-float-right Blob size
      th Created at
      th.uk-text-right Actions
  tbody
    - TimeMeasurer.start_measurement
    - TimeMeasurer.measure(:rendering_tag_page) do
      / - blobs_set.each do |blob_hash|
      /   tr.tree-node style="cursor: default" id="#{blob_hash["sha256"]}" onmouseover="this.querySelector('.to-be-hidden').classList.remove('uk-hidden')" onmouseout="this.querySelector('.to-be-hidden').classList.add('uk-hidden')"
      /     td.align-text-center
      /       - if blob_hash["is_required"]
      /         span.uk-padding-remove uk-icon="icon: check" style="color: green; min-width: max-content; padding: 0.5rem"
      /       - else
      /         span.uk-padding-remove uk-icon="icon: ban" style="color: red; min-width: max-content; padding: 0.5rem"
      /     td
      /       .inline-container-small
      /         a href="/blob-exploring/#{blob_hash["sha256"]}" uk-tooltip="title: #{blob_hash["sha256"]}; cls: uk-active; delay: 500;"= blob_hash["sha256"][0..6] + "..."
      /       a.to-be-hidden.uk-hidden
      /         span.copy-btn.cursor-pointer data-buffervalue="#{blob_hash["sha256"]}" uk-icon="icon: copy"
      /       - current_image_node_size = represent_size(blob_hash["size"])
      /     td.align-text-right= current_image_node_size
      /     / td #{represent_datetime(node_link[:node].created_at)}
      /     td #{blob_hash["created_at"]}
      /     td.align-text-right
      /       - if !blob_hash["sha256"].nil?
      /         - if !$read_only_mode
      /           span.uk-icon-link.cursor-pointer.icon-padding-right uk-icon="icon: trash" uk-tooltip="title: #{'Delete chosen blob'}; cls: uk-active; delay: 500;" onclick="delete_blob(`#{blob_hash["sha256"]}`)"
nav aria-label="Pagination"
  ul.uk-pagination.uk-flex-center.uk-margin-remove-bottom id="pagination-list"
    - TimeMeasurer.log_measurers
