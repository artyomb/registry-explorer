ruby:
  require_relative '../utils/common_utils'
  require_relative '../utils/Node'
  require_relative '../utils/file_utils'
  require_relative '../utils/time_measurer'
  margin_coef=1.5
  # CALCULATION OF DISK USAGE
  stored_blobs = nil
  stored_blobs_size = nil
  required_blobs = nil
  required_blobs_size = nil
  unused_blobs = nil
  unused_blobs_size = nil
  not_existing_blobs = Set.new
  blobs_set = Set.new
  images = extract_images()
  TimeMeasurer.start_measurement
  TimeMeasurer.measure(:calculate_disk_usage) do
    blobs_path = $base_path + '/blobs/sha256'
    required_blobs = images.map { _1[:required_blobs] }.reduce(Set.new, :merge)
    stored_blobs = Set.new
    Dir.children(blobs_path).each do |intermediate_path|
      current_blobs = Dir.children(File.join(blobs_path, intermediate_path))
      stored_blobs.merge(current_blobs)
      current_blobs.each { |blob| blobs_set.add(
              {
                      "sha256" => blob, "size" => CachesManager.blob_size(blob),
                      "is_required" => required_blobs.include?(blob),
                      "created_at" => File.exist?(File.join(blobs_path, intermediate_path, blob)) ? File.mtime(File.join(blobs_path, intermediate_path, blob)) : '-',
              }) }
    end
    # TODO: implement exploring unnecessary blobs
    puts "Directory size: #{represent_size(Dir.glob(File.join(blobs_path, '**', '*')) # Get all files and subdirectories
                                              .select { |file| File.file?(file) } # Filter only files
                                              .sum { |file| File.size(file) })}"
    unused_blobs = stored_blobs - required_blobs
    not_existing_blobs = required_blobs - stored_blobs
    required_blobs_size = required_blobs.map { |b| CachesManager.blob_size(b) }.sum
    stored_blobs_size = stored_blobs.map { |b| CachesManager.blob_size(b) }.sum
    unused_blobs_size = unused_blobs.map { |b| CachesManager.blob_size(b) }.sum
    disk_size_tooltip = "title:" +
            "Disk usage is calculated as the sum of all blobs in the registry.<br><br>" +
            "Actual data:<br>" +
            "#{required_blobs.size} required blobs disk usage: #{represent_size(required_blobs_size)}<br>" +
            "#{stored_blobs.size} stored blobs disk usage: #{represent_size(stored_blobs_size)}<br>" +
            "#{unused_blobs.size} unused blobs disk usage: #{represent_size(unused_blobs_size)}<br>" +
            "#{not_existing_blobs.size} not existing blobs"
  end
  TimeMeasurer.log_measurers

javascript:
    let blobs = #{{blobs_set.to_a.to_json}};

    let visualizationState = { 'Filtering' : null, 'Sorting' : null };

    document.addEventListener("DOMContentLoaded", function() {
        document.querySelectorAll('.copy-btn').forEach(function(copyBtn) {
            copyBtn.addEventListener('click', function(event) {
                event.stopPropagation();
                const textToCopy = copyBtn.dataset.buffervalue;
                navigator.clipboard.writeText(textToCopy).then(function() {
                    UIkit.notification({message: 'sha256 copied to clipboard', status: 'success', pos: 'top-right'});
                });
            });
        });
        UIkit.util.on(document, 'beforeshow', '.uk-tooltip.uk-active', function () {
            this.classList.add('uk-width-auto');
        });
    });

    async function delete_by_sha256(sha256, entityString, confirmationMessage, deleteRow) {
        UIkit.notification({ message: 'This operation is not supported yet', status: 'danger', pos: 'top-right' });

        // handle confirmation
        // const tableElement = document.getElementById(`${pathToImage.substring(1)}/${tagString}/${sha256}`);
        // UIkit.modal.confirm(confirmationMessage).then(async function () {
        //     try {
        //         const url = `/delete-${entityString}` + pathToImage + '/$sha256/' + sha256;
        //         const response = await fetch(url, {
        //             method: 'DELETE'
        //         })
        //         const responseText = await response.text(); // Wait for the response text
        //
        //         if (response.ok) {
        //             if (deleteRow) {
        //                 tableElement.remove();
        //             }
        //             if (entityString === 'tag') {
        //                 window.location.href = '/index';
        //                 return;
        //             }
        //             UIkit.notification({message: responseText, status: 'success', pos: 'top-right'});
        //         } else {
        //             UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
        //         }
        //     } catch (error) {
        //         UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
        //     }
        // }, function () {
        //     return false;
        // });
    }

    async function delete_blob(sha256) {
        delete_by_sha256(sha256, 'image', 'Are you sure you want to delete this image?', true);
    }
    async function delete_all_blobs() {
        delete_by_sha256('', 'tag', 'Are you sure you want to delete this tag? After confirmation you will be returned to the main page.', false);
    }

    async function delete_non_current_images() {
        // const tableElement = document.getElementById(`${pathToImage.substring(1)}/${tagString}/${sha256}`);
        UIkit.modal.confirm("Are you sure to delete all non-current images?").then(async function () {
            try {
                const url = `/delete-non-current-images` + pathToImage + "/" + tagString + '/$sha256/' + currentIndexSha256;
                const response = await fetch(url, {
                    method: 'DELETE'
                })
                const responseText = await response.text(); // Wait for the response text

                if (response.ok) {
                    UIkit.notification({message: responseText, status: 'success', pos: 'top-right'});
                    window.location.reload();
                } else {
                    UIkit.notification({message: 'Error: ' + responseText, status: 'danger', pos: 'top-right'});
                }
            } catch (error) {
                UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
            }
        }, function () {
            return false;
        });
    }

    async function copy_pull_command(sha256) {
        const pullUrl = imagesRegistryHost.isNaN || imagesRegistryHost === '' ? window.location.host : imagesRegistryHost;
        try {
            const command_text = `docker pull ${pullUrl}${pathToImage}@sha256:${sha256}`;
            navigator.clipboard.writeText(command_text).then(function() {
                UIkit.notification({message: `Command '${command_text}' copied to clipboard`, status: 'success', pos: 'top-right'});
            });
        } catch (error) {
            UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
        }
    }

sass:
  .copy-btn
    margin-left: 3.5rem
  .inline-container-small
    display: inline-block
    width: 3rem
  .inline-container
    display: inline-block
    width: 5rem
.uk-flex.uk-flex-row.align-items-center.uk-padding.uk-padding-remove-horizontal
  a.uk-link-text.border-around.hover-darker.padding-xsmall.uk-width-fit-content.uk-margin-right.align-content-center.uk-text-center href="/index"
    span.icon-padding-right.icon-padding-left.uk-text-primary uk-icon="icon: chevron-left"
  .uk-flex.uk-width-expand.uk-flex-between.align-items-center
    h1.uk-h1.uk-margin-remove-bottom= "#{'Disk space usage'}"
    .uk-flex.uk-flex-middle.uk-flex-between.small-column-gap
      .uk-label.uk-label-success.label-paddings.custom-label-background.unset-text-transform.align-content-center.border-around
        ul.uk-list.uk-list-divider.uk-list-collapse.uk-list-large.uk-margin-remove-bottom
          li
            span.icon-padding-right uk-icon="icon: database"
            span.uk-text-bold= "#{stored_blobs.size} stored blobs: #{represent_size(stored_blobs_size)}"
            ul
              li
                span.icon-padding-right uk-icon="icon: database"
                span.uk-text-bold= "#{required_blobs.size} required blobs: #{represent_size(required_blobs_size)}"
              li
                span.icon-padding-right uk-icon="icon: trash"
                span.uk-text-bold= "#{unused_blobs.size} unused blobs: #{represent_size(unused_blobs_size)}"
- if !$read_only_mode
  .uk-button-group.uk-float-right.small-column-gap
    button.switch-btn.uk-button.uk-button-default.uk-flex.align-items-center uk-tooltip="title: #{'Delete all blobs, which were not used by any image in your registry'}; cls: uk-active; delay: 500;" style="" onclick="delete_all_blobs()"
      span.icon-padding-right.icon-padding-right.uk-text-primary uk-icon="icon: trash" style="color: red !important"
      span="Delete unused blobs"
    / button.switch-btn.uk-button.uk-button-default uk-tooltip="title: #{'Deleting all images, besides current'}; cls: uk-active; delay: 500;" onclick="delete_non_current_images()" style=""= "Delete non-current images"
table.uk-table.uk-table-hover.uk-table-divider.uk-table-striped
  thead
    tr
      th style="min-width: 0%; width: 0%; max-width: 0%" Required
      th Blob exploring
      th.uk-float-right Blob size
      th Created at
      th.uk-text-right Actions
  tbody
    - TimeMeasurer.start_measurement
    - TimeMeasurer.measure(:rendering_tag_page) do
      - blobs_set.each do |blob_hash|
        tr.tree-node style="cursor: default" id="#{blob_hash["sha256"]}" onmouseover="this.querySelector('.to-be-hidden').classList.remove('uk-hidden')" onmouseout="this.querySelector('.to-be-hidden').classList.add('uk-hidden')"
          td.align-text-center
            - if blob_hash["is_required"]
              span.uk-padding-remove uk-icon="icon: check" style="color: green; min-width: max-content; padding: 0.5rem"
            - else
              span.uk-padding-remove uk-icon="icon: ban" style="color: red; min-width: max-content; padding: 0.5rem"
          td
            .inline-container-small
              a href="/blob-exploring/#{blob_hash["sha256"]}" uk-tooltip="title: #{blob_hash["sha256"]}; cls: uk-active; delay: 500;"= blob_hash["sha256"][0..6] + "..."
            a.to-be-hidden.uk-hidden
              span.copy-btn.cursor-pointer data-buffervalue="#{blob_hash["sha256"]}" uk-icon="icon: copy"
            - current_image_node_size = represent_size(blob_hash["size"])
          td.align-text-right= current_image_node_size
          / td #{represent_datetime(node_link[:node].created_at)}
          td #{blob_hash["created_at"]}
          td.align-text-right
            - if !blob_hash["sha256"].nil?
              - if !$read_only_mode
                span.uk-icon-link.cursor-pointer.icon-padding-right uk-icon="icon: trash" uk-tooltip="title: #{'Delete chosen blob'}; cls: uk-active; delay: 500;" onclick="delete_blob(`#{blob_hash["sha256"]}`)"
                / docker pull builder-registry-ui.builder.giscloud.ru/gis/front/main/master:1.0
                / button.uk-icon-link.cursor-pointer type="button" uk-toggle="target: #modal-example" uk-icon="icon: trash"
                / #modal-example uk-modal="true"
                /   .uk-modal-dialog.uk-modal-body
                /     h2.uk-modal-title Delete node
                /     p Are you sure you want to delete this node?
                /     p.uk-text-right
                /       button.uk-button.uk-button-default.uk-modal-close type="button" Cancel
                /       button.uk-button.uk-button-primary.uk-modal-close type="button" onclick="delete_image(`#{node_link[:node].sha256}`)" Delete

    - TimeMeasurer.log_measurers
