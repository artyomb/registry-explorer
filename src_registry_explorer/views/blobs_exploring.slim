javascript:
    let sourceBlobs = null;
    let readOnlyMode = #{{$read_only_mode}};
    let pageSize = 25;
    const blobsNotRequiredPredicate = blob => !blob.is_required && (document.getElementById('include-unused')?.checked ?? true);
    const blobsRequiredPredicate = blob => blob.is_required && (document.getElementById('include-required')?.checked ?? true);

    let visualizationOptions = { 'including_conditions' : [blobsNotRequiredPredicate, blobsRequiredPredicate], 'Sorting' : [] };
    let blobs = null;

    function updateBlobs() {
        blobs = sourceBlobs
            .filter(blob => visualizationOptions['including_conditions'].some(predicate => predicate(blob)))
            .sort((a, b) => b.size - a.size);
    }

    function represent_size(bytes) {
        try {
            const units = ['B', 'KB', 'MB', 'GB', 'TB', 'PB'];
            if (bytes === 0) return '0 B';

            const exp = Math.min(Math.floor(Math.log(bytes) / Math.log(1024)), units.length - 1);
            const size = bytes / Math.pow(1024, exp);

            return size.toFixed(2) + ' ' + units[exp];
        } catch (e) {
            console.error("Error in size representing:", e);
            return '-';
        }
    }

    function updatePage(pageNumber) {
        updateBlobs();
        updatePaginationBar(pageNumber);
        updateTable(pageNumber);
    }

    function updatePaginationBar(pageNumber) {
        const totalPages = Math.ceil(blobs.length / pageSize);
        const paginationBar = document.getElementById('pagination-list');
        paginationBar.innerHTML = '';

        const ul = document.createElement('ul');
        ul.className = 'uk-pagination';
        ul.setAttribute('uk-margin', '');

        // Previous button
        const prevLi = document.createElement('li');
        prevLi.innerHTML = `<a href="#" onclick="updatePage(${Math.max(0, pageNumber - 1)})"><span uk-pagination-previous></span></a>`;
        if (pageNumber === 0) prevLi.className = 'uk-disabled';
        ul.appendChild(prevLi);

        // First page
        if (pageNumber > 2) {
            ul.appendChild(createPageItem(0));
            if (pageNumber > 3) {
                const ellipsis = document.createElement('li');
                ellipsis.className = 'uk-disabled';
                ellipsis.innerHTML = '<span>…</span>';
                ul.appendChild(ellipsis);
            }
        }

        // Pages around current
        for (let i = Math.max(0, pageNumber - 2); i <= Math.min(totalPages - 1, pageNumber + 2); i++) {
            if (i === pageNumber) {
                const activeLi = document.createElement('li');
                activeLi.className = 'uk-active';
                activeLi.innerHTML = `<span aria-current="page">${i + 1}</span>`;
                ul.appendChild(activeLi);
            } else {
                ul.appendChild(createPageItem(i));
            }
        }

        // Last page
        if (pageNumber < totalPages - 3) {
            if (pageNumber < totalPages - 4) {
                const ellipsis = document.createElement('li');
                ellipsis.className = 'uk-disabled';
                ellipsis.innerHTML = '<span>…</span>';
                ul.appendChild(ellipsis);
            }
            ul.appendChild(createPageItem(totalPages - 1));
        }

        // Next button
        const nextLi = document.createElement('li');
        nextLi.innerHTML = `<a href="#" onclick="updatePage(${Math.min(totalPages - 1, pageNumber + 1)})"><span uk-pagination-next></span></a>`;
        if (pageNumber === totalPages - 1) nextLi.className = 'uk-disabled';
        ul.appendChild(nextLi);

        paginationBar.appendChild(ul);

        function createPageItem(index) {
            const li = document.createElement('li');
            li.innerHTML = `<a href="#" onclick="updatePage(${index})">${index + 1}</a>`;
            return li;
        }
    }

    function updateTable(pageNumber) {
        const startIndex = pageNumber * pageSize;
        const endIndex = startIndex + pageSize;
        const pageBlobs = blobs.slice(startIndex, endIndex);
        const blobTableBody = document.getElementById('blobs-table').querySelector('tbody');
        blobTableBody.innerHTML = '';
        const displayDeletingButtons = !readOnlyMode;

        pageBlobs.forEach(blob => {
            const row = document.createElement('tr');
            row.className = 'tree-node';
            row.style.cursor = 'default';
            row.id = blob.sha256;
            row.setAttribute('onmouseover', "this.querySelector('.to-be-hidden').classList.remove('uk-hidden')");
            row.setAttribute('onmouseout', "this.querySelector('.to-be-hidden').classList.add('uk-hidden')");

            row.innerHTML = `
                        <td class="align-text-center">
                            <span class="uk-padding-remove" uk-icon="icon: ${blob.is_required ? 'check' : 'ban'}"
                                  style="color: ${blob.is_required ? 'green' : 'red'}; min-width: max-content; padding: 0.5rem"></span>
                        </td>
                        <td>
                            <div class="inline-container-small">
                                <a href="/blob-exploring/${blob.sha256}" uk-tooltip="title: ${blob.sha256}; cls: uk-active; delay: 500;">${blob.sha256.substring(0, 6)}...</a>
                            </div>
                            <a class="to-be-hidden uk-hidden">
                                <span class="copy-btn cursor-pointer" data-buffervalue="${blob.sha256}" uk-icon="icon: copy"></span>
                            </a>
                        </td>
                        <td class="align-text-right">${represent_size(blob.size)}</td>
                        <td>${blob.created_at}</td>
                        <td class="align-text-right">
                            ${!readOnlyMode && blob.sha256 ?
                `<span class="uk-icon-link cursor-pointer icon-padding-right" uk-icon="icon: trash"
                                       uk-tooltip="title: Delete chosen blob; cls: uk-active; delay: 500;"
                                       onclick="delete_blob('${blob.sha256}')"></span>`
                : ''}
                        </td>
                    `;
            blobTableBody.appendChild(row);
        });
        document.querySelectorAll('.copy-btn').forEach(function (copyBtn) {
            copyBtn.addEventListener('click', function (event) {
                event.stopPropagation();
                const textToCopy = copyBtn.dataset.buffervalue;
                navigator.clipboard.writeText(textToCopy).then(function () {
                    UIkit.notification({message: 'sha256 copied to clipboard', status: 'success', pos: 'top-right'});
                });
            });
        });
    }

    async function loadBlobsData() {
        document.getElementById("loading-spinner-meta").style.display = "flex";
        document.getElementById("metadata-info").style.display = "none";
        document.getElementById("metadata-info").innerHTML = ``;
        document.getElementById("loading-spinner-table").style.display = "inline-block";
        try {
            const fetchUrl = "/blobs-exploring-data";
            // throw Error("Not implemented");
            const response = await fetch(fetchUrl, {method: 'GET'});

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const responseBody = await response.json();

            if (!responseBody || typeof responseBody !== "object") {
                throw new Error("Invalid JSON response");
            }

            const storedBlobsAmount = responseBody.stored_blobs_amount;
            const storedBlobsSize = responseBody.stored_blobs_size;
            const requiredBlobsAmount = responseBody.required_blobs_amount;
            const requiredBlobsSize = responseBody.required_blobs_size;
            const unusedBlobsAmount = responseBody.unused_blobs_amount;
            const unusedBlobsSize = responseBody.unused_blobs_size;
            sourceBlobs = JSON.parse(responseBody.source_blobs);
            let metadataHtml = `
                <li>
                    <span class="icon-padding-right" uk-icon="icon: database"></span>
                    <span class="uk-text-bold">${storedBlobsAmount} stored blobs: ${storedBlobsSize}</span>
                    <ul class="uk-margin-remove-bottom uk-margin-remove-top">
                        <li>
                            <span class="icon-padding-right" uk-icon="icon: database"></span>
                            <span class="uk-text-bold">${requiredBlobsAmount} required blobs: ${requiredBlobsSize}</span>
                        </li>
                        <li>
                            <span class="icon-padding-right" uk-icon="icon: trash"></span>
                            <span class="uk-text-bold">${unusedBlobsAmount} unused blobs: ${unusedBlobsSize}</span>
                        </li>
                    </ul>
                </li>
            `;

            document.getElementById("loading-spinner-meta").style.display = "none";
            document.getElementById("metadata-info").style.display = "list-item";
            document.getElementById("metadata-info").innerHTML = metadataHtml;
            document.getElementById("loading-spinner-table").style.display = "none";

            updatePage(0);
        } catch (error) {
            UIkit.notification({message: 'Error: ' + error.message, status: 'danger', pos: 'top-right'});
            console.error("Fetch Error:", error);
            const metadataHtml = `
                <div class="uk-margin uk-flex uk-flex-column align-items-center">
                    <p class="uk-text-danger">Failed to load blobs data</p>
                    <button class="uk-button uk-button-primary" onclick="loadBlobsData()">
                        Try Again
                    </button>
                </div>
            `;

            document.getElementById("loading-spinner-meta").style.display = "none";
            document.getElementById("metadata-info").style.display = "list-item";
            document.getElementById("metadata-info").innerHTML = metadataHtml;
            document.getElementById("loading-spinner-table").style.display = "none";

        }
    }

    document.addEventListener("DOMContentLoaded", function() {
        loadBlobsData();
        UIkit.util.on(document, 'beforeshow', '.uk-tooltip.uk-active', function () {
            this.classList.add('uk-width-auto');
        });

        document.addEventListener('click', function(event) {
            const menu = document.getElementById('include-menu');
            if (!menu.classList.contains('uk-hidden') && !menu.contains(event.target)) {
                menu.classList.add('uk-hidden');
            }
        });
    });

    async function copy_pull_command(sha256) {
        const pullUrl = imagesRegistryHost.isNaN || imagesRegistryHost === '' ? window.location.host : imagesRegistryHost;
        try {
            const command_text = `docker pull ${pullUrl}${pathToImage}@sha256:${sha256}`;
            navigator.clipboard.writeText(command_text).then(function() {
                UIkit.notification({message: `Command '${command_text}' copied to clipboard`, status: 'success', pos: 'top-right'});
            });
        } catch (error) {
            UIkit.notification({message: 'Error: ' + error, status: 'danger', pos: 'top-right'});
        }
    }

    function moveToRevisions() {
        const toRevisionsButton = document.getElementById('to-revisions-button');
        toRevisionsButton.toggleAttribute('disabled');
        toRevisionsButton.style.cursor = 'wait';
        document.body.style.cursor = "wait";
        window.location.href = `/revisions`;
    }

sass:
  .copy-btn
    margin-left: 3.5rem
  .inline-container-small
    display: inline-block
    width: 3rem
  .inline-container
    display: inline-block
    width: 5rem
.uk-flex.uk-flex-row.align-items-center.uk-padding.uk-padding-remove-horizontal
  a.uk-link-text.border-around.hover-darker.padding-xsmall.uk-width-fit-content.uk-margin-right.align-content-center.uk-text-center onclick="goBack('')"
    span.icon-padding-right.icon-padding-left.uk-text-primary uk-icon="icon: chevron-left"
  .uk-flex.uk-width-expand.uk-flex-between.align-items-center
    h1.uk-h1.uk-margin-remove-bottom= "#{'Disk space usage'}"
    .uk-flex.uk-flex-middle.uk-flex-between.small-column-gap
      .uk-label.label-paddings.custom-label-background.unset-text-transform.align-content-center.border-around.uk-width-expand
        ul.uk-list.uk-list-divider.uk-list-collapse.uk-list-large.uk-margin-remove-bottom.uk-width-expand
          #loading-spinner-meta.uk-padding-remove.uk-margin-remove uk-spinner="ratio: 1.5"
          #metadata-info
          / li
          /   span.icon-padding-right uk-icon="icon: database"
          /   span.uk-text-bold= "#{stored_blobs.size} stored blobs: #{represent_size(stored_blobs_size)}"
          /   ul
          /     li
          /       span.icon-padding-right uk-icon="icon: database"
          /       span.uk-text-bold= "#{required_blobs.size} required blobs: #{represent_size(required_blobs_size)}"
          /     li
          /       span.icon-padding-right uk-icon="icon: trash"
          /       span.uk-text-bold= "#{unused_blobs.size} unused blobs: #{represent_size(unused_blobs_size)}"
- if !$read_only_mode
  .uk-flex.uk-flex-right.small-column-gap
    .uk-button-group.uk-float-right.small-column-gap
      button.switch-btn.uk-button.uk-button-default.uk-flex.align-items-center id="to-revisions-button" style="" onclick="moveToRevisions()"
        span.icon-padding-right.icon-padding-right.uk-text-primary uk-icon="icon: search" style="color: red !important"
        span="Explore revisions"
    .uk-button-group.uk-float-right.small-column-gap
      a.switch-btn.uk-button.uk-button-default.uk-flex.align-items-center style="" href="/garbage-collection?with_history=false"
        span.icon-padding-right.icon-padding-right.uk-text-primary uk-icon="icon: trash" style="color: red !important"
        span="Preview light garbage-collect (only unused blobs)"
    .uk-button-group.uk-float-right.small-column-gap
      a.switch-btn.uk-button.uk-button-default.uk-flex.align-items-center style="" href="/garbage-collection?with_history=true"
        span.icon-padding-right.icon-padding-right.uk-text-primary uk-icon="icon: trash" style="color: red !important"
        span= "Preview hard garbage-collect (with history)"

table.uk-table.uk-table-hover.uk-table-divider.uk-table-striped id="blobs-table"
  thead
    tr
      th.align-text-center style="min-width: 3%; width: 3%; max-width: 3%"
        span.icon-padding-left.uk-text-primary.cursor-pointer uk-tooltip="title: #{'Choose including options'}; cls: uk-active; delay: 500;" uk-icon="icon: menu" onclick="event.stopPropagation(); document.getElementById('include-menu').classList.toggle('uk-hidden')"
        #include-menu.align-text-left.uk-hidden.uk-card.uk-card-default.uk-position-absolute.uk-padding-small style="z-index: 1000"
          .uk-margin-small
            label.uk-form-label Include in exploring:
            .uk-margin-small
              label
                input.uk-checkbox type="checkbox" name="include-required" checked="checked" id="include-required" onchange="updatePage(0)"
                span.uk-margin-small-left Required blobs
            .uk-margin-small
              label
                input.uk-checkbox type="checkbox" name="include-unused" checked="checked" id="include-unused" onchange="updatePage(0)"
                span.uk-margin-small-left Unused blobs
      th style="min-width: 25%; width: 25%; max-width: 25%" Blob exploring
      th.uk-float-right Blob size
      th Created at
      th.uk-text-right Actions
  tbody
nav aria-label="Pagination"
  ul.uk-pagination.uk-flex-center.uk-margin-remove-bottom id="pagination-list"

#loading-spinner-table.uk-flex.uk-flex-center.uk-flex-middle.uk-position-fixed.uk-position-center.uk-margin-top.uk-margin-bottom uk-spinner="ratio: 1.5"

