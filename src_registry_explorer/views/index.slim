link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/uikit@3.17.4/dist/css/uikit.min.css"
script src="https://cdn.jsdelivr.net/npm/uikit@3.17.4/dist/js/uikit.min.js"
script src="https://cdn.jsdelivr.net/npm/uikit@3.17.4/dist/js/uikit-icons.min.js"
ruby:
  require_relative '../utils/Node'
  margin_coef=1.5
  possible_statuses = ['error', 'ok', 'warning']

  base_path = (ENV['DBG'].nil? ? "/var/lib/registry" : Dir.pwd + '/../docker/data') + "/docker/registry/v2"

  path_to_repositories = base_path + "/repositories"
  repositories_path_list = Dir.glob(path_to_repositories + "/*").select { |f| File.directory?(f) }
  images = []
  images_path_list = Dir.glob("#{path_to_repositories}/**/*")
                        .select do |f|
    File.directory?(f) &&
            Dir.exist?(File.join(f, "_layers")) &&
            Dir.exist?(File.join(f, "_manifests")) &&
            Dir.exist?(File.join(f, "_uploads"))
  end
  puts("Founded following images:\n #{images_path_list}")
  puts
  images_path_list.each do |image_path|
    subfolders = image_path.split('/')
    image_name = "/" + subfolders[subfolders.find_index('repositories') + 1..].join('/')
    current_img = { name: image_name, tags: [], total_size: "-", total_layers: "-", status: "-" }
    images << current_img
    Dir.glob(image_path + "/_manifests/tags/*").select { |f| File.directory?(f) }.each do |tag_path|
      extract_tag_with_image(tag_path, base_path, image_name, current_img)
    end
  end

  tree = {children: {}, image: {} }
  # suppose images has name attribute. The name should split by '/'. Build a tree from it.
  images.each do |image|
    path_parts = image[:name].split('/')[1..]  # Skip first empty element from leading '/'
    current = tree
    path_parts.each do |part|
      current[:children][part] ||= { children: {}, image: {} }
      current = current[:children][part]
    end
    current[:image] = image
  end

  # deep flatten tree
  flatten_tree = lambda do |node, level = 0, pname = nil|
    result = []
    node[:children].each do |name, child|
      result << { name: [pname, name].flatten.compact.join('/'), level: level, image: child[:image], children_count: child[:children].size }
      result.concat(flatten_tree[child, level + 1, [pname, name]])
    end
    result
  end
  flattened = flatten_tree[tree]
sass:
  .tree-node
    cursor: pointer
  .hide-show-arrow
    cursor: pointer
    transition: transform 0.3s ease
    transform: rotate(0deg)
    &.rotate-arrow
      transform: rotate(90deg)

  .tr[data-href]
    cursor: pointer
    &:hover
      background-color: rgba(115, 209, 230, 0.22)
  .hidden
    display: none

javascript:
  document.addEventListener("DOMContentLoaded", function() {
      document.querySelector('body').addEventListener('click', function(event) {
          const row = event.target.closest('tr[data-href]');
          if (row) window.location.href = row.dataset.href;

          const eroot = event.target.closest('.tree-node');
          if (eroot) {
              let currentElement = eroot.nextElementSibling;
              while (currentElement && parseInt(currentElement.dataset.level) > parseInt(eroot.dataset.level)) {
                currentElement.classList.toggle('hidden');
                currentElement = currentElement.nextElementSibling;
              }

              eroot.querySelector(".hide-show-arrow")?.classList.toggle("rotate-arrow");
          }
      });
  });
h1 Registry
table
  tr
    th style="width: 20px"
    th Image name
    th
    th style="width: 120px" Created at
  - flattened.each do |node|
    tr.tree-node data-level="#{node[:level]}"
      td
        - unless node[:children_count] == 0 && (node[:image][:tags] || []).empty?
          img.hide-show-arrow.rotate-arrow src='/images/chevron-right.svg' alt="Toggle Example"
      /style="display: #{image[:tags].size > 0 ? 'flex' : 'none' }"
      td style="padding-left: #{node[:level]}em" = node[:name]
      td
        /#{image[:tags].size > 0 ? image[:tags].map { |t| t[:name] }.join(', ') : 'No tags'}
      td Created at
    - node[:image][:tags]&.each do |tag|
      tr.tree-node.table-view data-href="/tag-exploring#{node[:image][:name]}/#{tag[:name]}" data-level="#{node[:level]+1}"
        td
        td  <span class="table-view" style="display: none">#{node[:image][:name]}</span> #{tag[:name]}
        td
          / #{(tag[:index_Nodes].map { |index_node| index_node[:node].created_at.nil? ? -1 : index_node[:node].created_at }).min}
        td Created at