ruby:
  require 'benchmark'
  require_relative '../utils/Node'
  require_relative '../utils/file_utils'
  require_relative '../utils/time_measurer'
  margin_coef=1.5
  repo_path = $base_path + "/repositories"

  images = Set.new
  TimeMeasurer.start_measurement

  tree = { children: {}, image: {}, total_images_amount: 0, required_blobs: Set.new, problem_blobs: Set.new }

  flattened = nil
  extract_images(images)
  required_in_registry_blobs = Set.new
  problem_blobs = Set.new
  images.each do |image|
    required_in_registry_blobs.merge(image[:required_blobs])
    problem_blobs.merge(image[:problem_blobs])
  end
  TimeMeasurer.measure(:building_tree) do
    build_tree(images, tree)
  end
  TimeMeasurer.measure(:flatten_tree) do
    flattened = flatten_tree(tree)
  end
  puts TimeMeasurer.log_measurers
  puts "Flattened tree size: #{flattened.size}"

javascript:
    let viewMode = 'tree';
    function updateRowStripes() {
        const visibleRows = [...document.querySelectorAll('tbody tr.tree-node:not(.hidden)')];

        visibleRows.forEach((row, index) => {
            if (index % 2 === 0) {
                row.classList.add('striped-even');
                row.classList.remove('striped-odd');
            } else {
                row.classList.add('striped-odd');
                row.classList.remove('striped-even');
            }
        });
    }

    function showAllChildrenLevelOne(currentNode) {
        let childElem = currentNode.nextElementSibling;
        let closestArrow = currentNode?.querySelector(".hide-show-arrow");
        closestArrow?.classList.add("rotate-arrow");
        closestArrow = childElem?.querySelector(".hide-show-arrow");
        let levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        while (childElem && levelDifference > 0) {
            if (levelDifference === 1) {
              closestArrow?.classList.remove("rotate-arrow");
              childElem.classList.remove('hidden');
            }
            childElem = childElem.nextElementSibling;
            closestArrow = childElem?.querySelector(".hide-show-arrow");
            levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        }
        updateRowStripes();
    }

    function showAllChildren(currentNode) {
        let childElem = currentNode.nextElementSibling;
        let closestArrow = currentNode?.querySelector(".hide-show-arrow");
        closestArrow?.classList.add("rotate-arrow");
        closestArrow = childElem?.querySelector(".hide-show-arrow");
        let levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        while (childElem && levelDifference > 0) {
            closestArrow?.classList.add("rotate-arrow");
            childElem.classList.remove('hidden');
            childElem = childElem.nextElementSibling;
            closestArrow = childElem?.querySelector(".hide-show-arrow");
            levelDifference = parseInt(childElem.dataset.level) - parseInt(currentNode.dataset.level);
        }
        updateRowStripes();
    }

    function hideAllChildren(currentNode) {
        let childElem = currentNode.nextElementSibling;
        let closestArrow = currentNode?.querySelector(".hide-show-arrow");
        while (childElem && parseInt(childElem.dataset.level) > parseInt(currentNode.dataset.level)) {
          closestArrow?.classList.remove("rotate-arrow");
          childElem.classList.add('hidden');
          childElem = childElem.nextElementSibling;
          closestArrow = childElem?.querySelector(".hide-show-arrow");
        }
        updateRowStripes();
    }

    function performSearch(event) {
        const searchString = document.getElementById("imageSearch").value.toLowerCase();
        if (viewMode === 'tree') {
            if (searchString.length === 0) {
                showDefaultTreeView();
            }else {
                const rows = document.querySelectorAll("tbody tr.tree-node");
                rows.forEach(function (row) {
                    const rowText = row.textContent.toLowerCase();
                    if (rowText.includes(searchString)) {
                        row.classList.remove("hidden");

                        showAllChildren(row);
                    } else {
                        row.classList.add("hidden");
                        hideAllChildren(row);
                    }
                });
            }
        } else {
            // debug
            document.querySelectorAll("tbody tr.tree-node").forEach(function (row) {
                if (row.classList.contains(".table-view") || row.querySelectorAll(".table-view").length > 0) {
                    const rowText = row.textContent.toLowerCase();
                    if (rowText.includes(searchString)) {
                        row.classList.remove("hidden");
                        showAllChildren(row);
                    } else {
                        row.classList.add("hidden");
                        hideAllChildren(row);
                    }
                }
            });
        }
        updateRowStripes();
    }

    function showDefaultTreeView(){
        document.querySelectorAll(".tree-node").forEach(function (treeNode) {
            if (treeNode.dataset.level <= 0) {
                treeNode.classList.remove("hidden");
                treeNode.querySelector(".hide-show-arrow")?.classList.remove("rotate-arrow");
            } else {
                treeNode.classList.add("hidden");
                treeNode.querySelector(".hide-show-arrow")?.classList.add("rotate-arrow");
            }
        });
    }

    document.addEventListener("DOMContentLoaded", function() {
        updateRowStripes();

        showDefaultTreeView();

        document.querySelector('body').addEventListener('click', function(event) {
            const row = event.target.closest('tr[data-href]');
            if (row) window.location.href = row.dataset.href;
            const currentNode = event.target.closest('.tree-node');
            let closestArrow = currentNode?.querySelector(".hide-show-arrow");
            if (currentNode) {
                if (!closestArrow) return;
                const branchExpanded = closestArrow.classList.contains("rotate-arrow");
                if (branchExpanded) {
                    if (event.ctrlKey) {
                        showAllChildren(currentNode);
                    } else { hideAllChildren(currentNode);}
                } else {
                    if (event.ctrlKey) {
                        showAllChildren(currentNode);
                    } else {
                        showAllChildrenLevelOne(currentNode);
                    }
                }
            }
        });

        document.getElementById('imageSearch').addEventListener('input', performSearch);

        document.querySelectorAll('.switch-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const isActive = btn.classList.contains('uk-button-primary');
                if (!isActive) {
                    const btnText = btn.textContent;
                    if (btnText === "Tree view") {
                        document.querySelectorAll('.tree-node').forEach(elem =>{
                            if (elem.dataset.level > 0) {
                                elem.classList.add('hidden');
                                elem.querySelector('.table-view')?.classList.add('hidden');
                                elem.querySelector('.tree-view')?.classList.remove('hidden');
                                elem.querySelector('.hide-show-arrow')?.classList.add('rotate-arrow');
                            } else {
                                elem.classList.remove('hidden');
                                elem.querySelector('.hide-show-arrow')?.classList.remove('rotate-arrow'); }
                            viewMode = "tree";
                        });
                    } else {
                        document.querySelectorAll('.tree-node').forEach(elem => {
                           elem.classList.remove('hidden');
                        });
                        document.querySelectorAll('.tree-view').forEach(elem => {
                            elem.classList.add('hidden');
                        });
                        document.querySelectorAll('.table-view').forEach(elem => {
                            elem.classList.remove('hidden');
                        });
                        viewMode = "table";
                    }
                    btn.classList.add('uk-button-primary');
                    if (btn.nextElementSibling) btn.nextElementSibling.classList.remove('uk-button-primary');
                    else btn.previousElementSibling.classList.remove('uk-button-primary');
                }
                performSearch(null)
                updateRowStripes();
            });
        });
        updateRowStripes();
    });

/ h1.uk-h1= "Docker registry content (#{images.map{|img| img[:tags].map{ |tag| tag[:index_Nodes].size }.sum}.sum} images in #{images.map{|img| img[:tags].size}.sum} tags, total size = #{represent_size(CachesManager.get_repo_size("REPOSITORY", required_in_registry_blobs))})"
.uk-flex.uk-padding.uk-padding-remove-horizontal.uk-width-expand.uk-flex-between.align-items-center.uk-padding-remove-bottom
  h1.uk-h1.uk-margin-remove= "Docker registry content"
  .uk-flex.uk-flex-middle.uk-flex-between.small-column-gap.uk-overflow-auto
    .uk-label.label-paddings.unset-text-transform.align-content-center.custom-label-background
      span.icon-padding-right uk-icon="icon: tag"
      span.uk-text-bold Tags:
      span= " #{images.map{|img| img[:tags].size}.sum}"
    .uk-label.label-paddings.unset-text-transform.align-content-center.custom-label-background
      / span uk-icon="icon: hashtag"
      span.icon-padding-right uk-icon="icon: album"
      span.uk-text-bold Images :
      span= " #{images.map{|img| img[:tags].map{ |tag| tag[:index_Nodes].size }.sum}.sum}"
    a.link-tag.uk-label.label-paddings.unset-text-transform.align-content-center.border-around href="/registry-healthcheck"
      span.icon-padding-right uk-icon="icon: ban"
      span.uk-text-bold Problem blobs:
      span.icon-padding-right= " #{problem_blobs.size}"
    a.link-tag.uk-label.label-paddings.unset-text-transform.align-content-center.border-around href="/blobs-exploring"
      span.icon-padding-right uk-icon="icon: database"
      span.uk-text-bold Disk usage:
      span.icon-padding-right= " #{represent_size(CachesManager.get_repo_size("REPOSITORY", required_in_registry_blobs))}"
hr
.uk-padding-small.uk-padding-remove-horizontal.uk-padding-remove-bottom.uk-flex.uk-flex-between.align-items-center.uk-flex-wrap
  form.uk-search.uk-search-default onsubmit="performSearch(event); return false;"
    input.uk-search-input type="search" id="imageSearch" placeholder="Type image name" aria-label="Search"
    button.uk-search-icon-flip onclick="performSearch(event)" uk-search-icon=""
  .uk-button-group.uk-float-right
    button.switch-btn.uk-button.uk-button-primary id="treeViewButton" style=""= "Tree view"
    button.switch-btn.uk-button.uk-button-default id="tableViewButton" style=""= "Table view"
table.uk-table.uk-table-hover.uk-table-divider.uk-table-striped
  thead
    tr
      th Image/tag name
      th style="text-align: right" Images amount
      th style="text-align: right" Image size
      th style="text-align: right" Disk usage
      th Created at
  tbody
    - flattened.each do |node|
      - warn_node_condition = node[:problem_blobs].size > 0 || (!node[:image].nil? && node[:image].size > 0 && node[:image][:problem_blobs].size > 0)
      tr.tree-node.tree-view.hidden class="#{warn_node_condition ? 'warning-background' : ''}" data-level="#{node[:level]}"
        td
          - if warn_node_condition
            - puts "Node #{node[:name]} has problem blobs #{node[:problem_blobs].map { |s| s[0..25] + '...' }.join(', ')}"
            span.warning-icon uk-tooltip="title: #{(node[:problem_blobs].size == 0) ? 'Full size of tag' : "Some layers of tag not found:<br>" + node[:problem_blobs].map { |s| s[0..25] + '...' }.join('<br>')}; delay: 500;" uk-icon="icon: warning"
          span style="padding-left: #{node[:level]}em"
          - unless node[:children_count] == 0 && (node[:image][:tags] || []).empty?
            span.hide-show-arrow uk-icon="icon: chevron-right"
          span = node[:name]
        td.alight-text-right
        td.align-text-right
        td.align-text-right #{node[:children_count] == 0 ? represent_size(node[:image][:total_size]) : represent_size(CachesManager.get_repo_size("#{repo_path}/#{node[:name]}", node[:required_blobs]))}
        td -
      - node[:image][:tags]&.each do |tag|
        tr.tree-node.hidden class="#{tag[:problem_blobs].size > 0 ? 'warning-background' : ''}" data-href="/tag-exploring#{node[:image][:name]}/#{tag[:name]}" data-level="#{node[:level]+1}"
          td
            - if tag[:problem_blobs].size != 0
              span.warning-icon uk-tooltip="title: #{(tag[:problem_blobs].size == 0) ? 'Full size of tag' : "Some layers of tag not found:<br>" + tag[:problem_blobs].map{|s| s[0..25] + '...' }.join('<br>')}; delay: 500;"  uk-icon="icon: warning"
            span.tree-view style="padding-left: #{node[:level] + 1}em"
            span uk-icon="icon: tag" style="padding: 0.5rem"
            span.table-view.hidden #{node[:image][:name][1..]}:
            span #{tag[:name]}
          td.align-text-right #{tag[:index_Nodes].size}
          / Adjust disk usage
          td.align-text-right #{represent_size(tag[:index_Nodes].first[:node].get_effective_size).to_s + (tag[:problem_blobs].size > 0 ? ' (some blobs not found)' : '')}
          td.align-text-right #{represent_size(tag[:size]).to_s + (tag[:problem_blobs].size > 0 ? ' (some blobs not found)' : '')}
          td #{represent_datetime(tag[:index_Nodes]&.select{ |nd| tag[:current_index_sha256] == nd[:node].sha256 }.first[:node].created_at)}
